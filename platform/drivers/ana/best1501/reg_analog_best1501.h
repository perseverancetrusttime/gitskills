/***************************************************************************
 *
 * Copyright 2015-2020 BES.
 * All rights reserved. All unpublished rights reserved.
 *
 * No part of this work may be used or reproduced in any form or by any
 * means, or stored in a database or retrieval system, without prior written
 * permission of BES.
 *
 * Use of this work is governed by a license granted by BES.
 * This work contains confidential and proprietary information of
 * BES. which is protected by copyright, trade secret,
 * trademark and other intellectual property rights.
 *
 ****************************************************************************/
#ifndef __REG_ANALOG_BEST1501_H__
#define __REG_ANALOG_BEST1501_H__

#include "plat_types.h"

enum ANA_REG_T {
    ANA_REG_61 = 0x61,
    ANA_REG_62,
    ANA_REG_63,
    ANA_REG_64,
    ANA_REG_65,
    ANA_REG_66,
    ANA_REG_67,
    ANA_REG_68,
    ANA_REG_69,
    ANA_REG_6A,
    ANA_REG_6B,
    ANA_REG_6C,
    ANA_REG_6D,
    ANA_REG_6E,
    ANA_REG_6F,
    ANA_REG_70,
    ANA_REG_71,
    ANA_REG_72,
    ANA_REG_73,
    ANA_REG_74,
    ANA_REG_75,
    ANA_REG_76,
    ANA_REG_77,
    ANA_REG_78,
    ANA_REG_79,
    ANA_REG_7A,
    ANA_REG_7B,
    ANA_REG_7C,
    ANA_REG_7D,
    ANA_REG_7E,
    ANA_REG_7F,
    ANA_REG_80,
    ANA_REG_81,
    ANA_REG_82,
    ANA_REG_83,
    ANA_REG_84,
    ANA_REG_85,
    ANA_REG_86,
    ANA_REG_87,
    ANA_REG_88,
    ANA_REG_89,
    ANA_REG_8A,
    ANA_REG_8B,
    ANA_REG_8C,
    ANA_REG_8D,
    ANA_REG_8E,
    ANA_REG_8F,
    ANA_REG_90,
    ANA_REG_91,
    ANA_REG_92,
    ANA_REG_93,
    ANA_REG_94,
    ANA_REG_95,
    ANA_REG_96,
    ANA_REG_97,
    ANA_REG_98,
    ANA_REG_99,
    ANA_REG_9A,
    ANA_REG_9B,
    ANA_REG_9C,
    ANA_REG_9D,
    ANA_REG_9E,
    ANA_REG_9F,
    ANA_REG_A0,
    ANA_REG_A1,
    ANA_REG_A2,
    ANA_REG_A3,
    ANA_REG_A4,
    ANA_REG_A5,
    ANA_REG_A6,
    ANA_REG_A7,
    ANA_REG_A8,
    ANA_REG_A9,
    ANA_REG_AA,
    ANA_REG_AB,
    ANA_REG_AC,
    ANA_REG_AD,
    ANA_REG_AE,
    ANA_REG_AF,
    ANA_REG_B0,
    ANA_REG_B1,
    ANA_REG_B2,
    ANA_REG_B3,
    ANA_REG_B4,
    ANA_REG_B5,
    ANA_REG_B6,
    ANA_REG_B7,
    ANA_REG_B8,
    ANA_REG_B9,
    ANA_REG_BA,
    ANA_REG_BB,
    ANA_REG_BC,
    ANA_REG_BD,

    ANA_REG_161 = 0x161,
    ANA_REG_162,
    ANA_REG_163,
    ANA_REG_164,
    ANA_REG_165,
    ANA_REG_166,
    ANA_REG_167,
    ANA_REG_168,
    ANA_REG_169,
    ANA_REG_16A,
    ANA_REG_16B,
    ANA_REG_16C,
    ANA_REG_16D,
    ANA_REG_16E,
    ANA_REG_16F,
    ANA_REG_170,
    ANA_REG_171,
    ANA_REG_172,
    ANA_REG_173,
    ANA_REG_174,
    ANA_REG_175,
    ANA_REG_176,
    ANA_REG_177,
    ANA_REG_178,
    ANA_REG_179,
    ANA_REG_17A,
    ANA_REG_17B,
    ANA_REG_17C,
    ANA_REG_17D,
    ANA_REG_17E,
    ANA_REG_17F,
    ANA_REG_180,
    ANA_REG_181,
    ANA_REG_182,
    ANA_REG_183,
    ANA_REG_184,
    ANA_REG_185,
    ANA_REG_186,
    ANA_REG_187,
    ANA_REG_188,
    ANA_REG_189,
    ANA_REG_18A,
    ANA_REG_18B,

    ANA_REG_261 = 0x261,
    ANA_REG_262,
    ANA_REG_263,
    ANA_REG_264,
    ANA_REG_265,
    ANA_REG_266,
    ANA_REG_267,
    ANA_REG_268,
    ANA_REG_269,
    ANA_REG_26A,
    ANA_REG_26B,
    ANA_REG_26C,
    ANA_REG_26D,
    ANA_REG_26E,
    ANA_REG_26F,
    ANA_REG_270,
    ANA_REG_271,
    ANA_REG_272,
    ANA_REG_273,
    ANA_REG_274,
    ANA_REG_275,
    ANA_REG_276,
    ANA_REG_277,
    ANA_REG_278,
    ANA_REG_279,
    ANA_REG_27A,
    ANA_REG_27B,
    ANA_REG_27C,
    ANA_REG_27D,
    ANA_REG_27E,
    ANA_REG_27F,
    ANA_REG_280,
    ANA_REG_281,
    ANA_REG_282,
    ANA_REG_283,
    ANA_REG_284,
    ANA_REG_285,
    ANA_REG_286,
    ANA_REG_287,
    ANA_REG_288,
    ANA_REG_289,
    ANA_REG_28A,
    ANA_REG_28B,
    ANA_REG_28C,
    ANA_REG_28D,
    ANA_REG_28E,
    ANA_REG_28F,
    ANA_REG_290,
    ANA_REG_291,
    ANA_REG_292,
    ANA_REG_293,
    ANA_REG_294,
    ANA_REG_295,
    ANA_REG_296,
    ANA_REG_297,
    ANA_REG_298,
    ANA_REG_299,
    ANA_REG_29A,
    ANA_REG_29B,
    ANA_REG_29C,
    ANA_REG_29D,
    ANA_REG_29E,
    ANA_REG_29F,
    ANA_REG_2A0,
    ANA_REG_2A1,
    ANA_REG_2A2,
    ANA_REG_2A3,
    ANA_REG_2A4,
    ANA_REG_2A5,
    ANA_REG_2A6,
    ANA_REG_2A7,
    ANA_REG_2A8,
    ANA_REG_2A9,
    ANA_REG_2AA,
    ANA_REG_2AB,
    ANA_REG_2AC,
    ANA_REG_2AD,
    ANA_REG_2AE,
    ANA_REG_2AF,
    ANA_REG_2B0,

    ANA_REG_361 = 0x361,
    ANA_REG_362,
    ANA_REG_363,
    ANA_REG_364,
    ANA_REG_365,
    ANA_REG_366,
    ANA_REG_367,
    ANA_REG_368,
    ANA_REG_369,
    ANA_REG_36A,
    ANA_REG_36B,
    ANA_REG_36C,
    ANA_REG_36D,
    ANA_REG_36E,
    ANA_REG_36F,
    ANA_REG_370,
    ANA_REG_371,
    ANA_REG_372,
    ANA_REG_373,
    ANA_REG_374,
    ANA_REG_375,
    ANA_REG_376,
    ANA_REG_377,
    ANA_REG_378,
    ANA_REG_379,
    ANA_REG_37A,
    ANA_REG_37B,
    ANA_REG_37C,
    ANA_REG_37D,
    ANA_REG_37E,
    ANA_REG_37F,
    ANA_REG_380,
    ANA_REG_381,
    ANA_REG_382,
    ANA_REG_383,
    ANA_REG_384,
};

// REG_60
#define REVID_SHIFT                         0
#define REVID_MASK                          (0xF << REVID_SHIFT)
#define REVID(n)                            BITFIELD_VAL(REVID, n)
#define CHIPID_SHIFT                        4
#define CHIPID_MASK                         (0xFFF << CHIPID_SHIFT)
#define CHIPID(n)                           BITFIELD_VAL(CHIPID, n)

// REG_61
#define REG_CODEC_EN_ADCA                   (1 << 0)
#define REG_CODEC_RESET_ADCA                (1 << 1)
#define CFG_RESET_ADCA_DR                   (1 << 2)
#define REG_CODEC_IDETA_EN                  (1 << 3)
#define REG_CODEC_ADCA_CLK_SEL              (1 << 4)
#define REG_CODEC_ADCA_CH_SEL_SHIFT         5
#define REG_CODEC_ADCA_CH_SEL_MASK          (0x3 << REG_CODEC_ADCA_CH_SEL_SHIFT)
#define REG_CODEC_ADCA_CH_SEL(n)            BITFIELD_VAL(REG_CODEC_ADCA_CH_SEL, n)
#define REG_CODEC_ADCA_DITHER_BIT_EN        (1 << 7)
#define CFG_ADCA_DITHER_CLK_INV             (1 << 8)
#define REG_CODEC_ADCA_GAIN_UPDATE          (1 << 9)
#define REG_CODEC_ADCA_GAIN_BIT_SHIFT       10
#define REG_CODEC_ADCA_GAIN_BIT_MASK        (0x7 << REG_CODEC_ADCA_GAIN_BIT_SHIFT)
#define REG_CODEC_ADCA_GAIN_BIT(n)          BITFIELD_VAL(REG_CODEC_ADCA_GAIN_BIT, n)
#define REG_CODEC_ADCA_PRE_CHARGE           (1 << 13)
#define CFG_PRE_CHARGE_ADCA_DR              (1 << 14)
#define REG_RX_ADCA_ZERO_DET_EN             (1 << 15)

// REG_62
#define REG_CODEC_ADCA_RES_2P5K_DR          (1 << 0)
#define REG_CODEC_ADCA_RES_2P5K_UPDATE      (1 << 1)
#define REG_CODEC_ADCA_RES_2P5K             (1 << 2)
#define REG_CODEC_ADCA_CAP_BIT1_SHIFT       3
#define REG_CODEC_ADCA_CAP_BIT1_MASK        (0x7F << REG_CODEC_ADCA_CAP_BIT1_SHIFT)
#define REG_CODEC_ADCA_CAP_BIT1(n)          BITFIELD_VAL(REG_CODEC_ADCA_CAP_BIT1, n)
#define REG_CODEC_ADCA_CAP_BIT2_SHIFT       10
#define REG_CODEC_ADCA_CAP_BIT2_MASK        (0x1F << REG_CODEC_ADCA_CAP_BIT2_SHIFT)
#define REG_CODEC_ADCA_CAP_BIT2(n)          BITFIELD_VAL(REG_CODEC_ADCA_CAP_BIT2, n)

// REG_63
#define REG_CODEC_ADCA_CAP_BIT3_SHIFT       0
#define REG_CODEC_ADCA_CAP_BIT3_MASK        (0x1F << REG_CODEC_ADCA_CAP_BIT3_SHIFT)
#define REG_CODEC_ADCA_CAP_BIT3(n)          BITFIELD_VAL(REG_CODEC_ADCA_CAP_BIT3, n)
#define REG_CODEC_ADCA_OP1_IBIT_SHIFT       5
#define REG_CODEC_ADCA_OP1_IBIT_MASK        (0x3 << REG_CODEC_ADCA_OP1_IBIT_SHIFT)
#define REG_CODEC_ADCA_OP1_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCA_OP1_IBIT, n)
#define REG_CODEC_ADCA_OP2_IBIT_SHIFT       7
#define REG_CODEC_ADCA_OP2_IBIT_MASK        (0x3 << REG_CODEC_ADCA_OP2_IBIT_SHIFT)
#define REG_CODEC_ADCA_OP2_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCA_OP2_IBIT, n)
#define REG_CODEC_ADCA_OP3_IBIT_SHIFT       9
#define REG_CODEC_ADCA_OP3_IBIT_MASK        (0x3 << REG_CODEC_ADCA_OP3_IBIT_SHIFT)
#define REG_CODEC_ADCA_OP3_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCA_OP3_IBIT, n)
#define REG_CODEC_ADCA_OP4_IBIT_SHIFT       11
#define REG_CODEC_ADCA_OP4_IBIT_MASK        (0x3 << REG_CODEC_ADCA_OP4_IBIT_SHIFT)
#define REG_CODEC_ADCA_OP4_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCA_OP4_IBIT, n)
#define REG_CODEC_ADCA_REG_VSEL_SHIFT       13
#define REG_CODEC_ADCA_REG_VSEL_MASK        (0x7 << REG_CODEC_ADCA_REG_VSEL_SHIFT)
#define REG_CODEC_ADCA_REG_VSEL(n)          BITFIELD_VAL(REG_CODEC_ADCA_REG_VSEL, n)

// REG_64
#define REG_CODEC_ADCA_IBSEL_OFFSET_SHIFT   0
#define REG_CODEC_ADCA_IBSEL_OFFSET_MASK    (0xF << REG_CODEC_ADCA_IBSEL_OFFSET_SHIFT)
#define REG_CODEC_ADCA_IBSEL_OFFSET(n)      BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_OFFSET, n)
#define REG_CODEC_ADCA_IBSEL_OP1_SHIFT      4
#define REG_CODEC_ADCA_IBSEL_OP1_MASK       (0xF << REG_CODEC_ADCA_IBSEL_OP1_SHIFT)
#define REG_CODEC_ADCA_IBSEL_OP1(n)         BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_OP1, n)
#define REG_CODEC_ADCA_IBSEL_OP2_SHIFT      8
#define REG_CODEC_ADCA_IBSEL_OP2_MASK       (0xF << REG_CODEC_ADCA_IBSEL_OP2_SHIFT)
#define REG_CODEC_ADCA_IBSEL_OP2(n)         BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_OP2, n)
#define REG_CODEC_ADCA_IBSEL_OP3_SHIFT      12
#define REG_CODEC_ADCA_IBSEL_OP3_MASK       (0xF << REG_CODEC_ADCA_IBSEL_OP3_SHIFT)
#define REG_CODEC_ADCA_IBSEL_OP3(n)         BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_OP3, n)

// REG_65
#define REG_CODEC_ADCA_IBSEL_OP4_SHIFT      0
#define REG_CODEC_ADCA_IBSEL_OP4_MASK       (0xF << REG_CODEC_ADCA_IBSEL_OP4_SHIFT)
#define REG_CODEC_ADCA_IBSEL_OP4(n)         BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_OP4, n)
#define REG_CODEC_ADCA_IBSEL_REG_SHIFT      4
#define REG_CODEC_ADCA_IBSEL_REG_MASK       (0xF << REG_CODEC_ADCA_IBSEL_REG_SHIFT)
#define REG_CODEC_ADCA_IBSEL_REG(n)         BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_REG, n)
#define REG_CODEC_ADCA_IBSEL_VCOMP_SHIFT    8
#define REG_CODEC_ADCA_IBSEL_VCOMP_MASK     (0xF << REG_CODEC_ADCA_IBSEL_VCOMP_SHIFT)
#define REG_CODEC_ADCA_IBSEL_VCOMP(n)       BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_VCOMP, n)
#define REG_CODEC_ADCA_IBSEL_VREF_SHIFT     12
#define REG_CODEC_ADCA_IBSEL_VREF_MASK      (0xF << REG_CODEC_ADCA_IBSEL_VREF_SHIFT)
#define REG_CODEC_ADCA_IBSEL_VREF(n)        BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_VREF, n)

// REG_66
#define REG_CODEC_ADCA_IBSEL_VREFBUF_SHIFT  0
#define REG_CODEC_ADCA_IBSEL_VREFBUF_MASK   (0xF << REG_CODEC_ADCA_IBSEL_VREFBUF_SHIFT)
#define REG_CODEC_ADCA_IBSEL_VREFBUF(n)     BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_VREFBUF, n)
#define REG_CODEC_ADCA_IBSEL_IDAC2_SHIFT    4
#define REG_CODEC_ADCA_IBSEL_IDAC2_MASK     (0xF << REG_CODEC_ADCA_IBSEL_IDAC2_SHIFT)
#define REG_CODEC_ADCA_IBSEL_IDAC2(n)       BITFIELD_VAL(REG_CODEC_ADCA_IBSEL_IDAC2, n)
#define REG_CODEC_ADCA_OFFSET_CAL_S_SHIFT   8
#define REG_CODEC_ADCA_OFFSET_CAL_S_MASK    (0x1F << REG_CODEC_ADCA_OFFSET_CAL_S_SHIFT)
#define REG_CODEC_ADCA_OFFSET_CAL_S(n)      BITFIELD_VAL(REG_CODEC_ADCA_OFFSET_CAL_S, n)
#define REG_CODEC_ADCA_OFFSET_CURRENT_EN    (1 << 13)
#define REG_CODEC_ADCA_OFFSET_CURRENT_SEL   (1 << 14)
#define REG_CODEC_ADCA_OFFSET_SW_EN         (1 << 15)

// REG_67
#define REG_CODEC_ADCA_OFFSET_BIT_SHIFT     0
#define REG_CODEC_ADCA_OFFSET_BIT_MASK      (0x3FFF << REG_CODEC_ADCA_OFFSET_BIT_SHIFT)
#define REG_CODEC_ADCA_OFFSET_BIT(n)        BITFIELD_VAL(REG_CODEC_ADCA_OFFSET_BIT, n)
#define REG_CODEC_ADCA_DVDD_SEL             (1 << 14)
#define REG_CODEC_ADCA_PU_REG               (1 << 15)

// REG_68
#define REG_CODEC_ADCA_VREF_SEL_SHIFT       0
#define REG_CODEC_ADCA_VREF_SEL_MASK        (0xF << REG_CODEC_ADCA_VREF_SEL_SHIFT)
#define REG_CODEC_ADCA_VREF_SEL(n)          BITFIELD_VAL(REG_CODEC_ADCA_VREF_SEL, n)
#define REG_CODEC_ADCA_VREFBUF_BIT_SHIFT    4
#define REG_CODEC_ADCA_VREFBUF_BIT_MASK     (0xF << REG_CODEC_ADCA_VREFBUF_BIT_SHIFT)
#define REG_CODEC_ADCA_VREFBUF_BIT(n)       BITFIELD_VAL(REG_CODEC_ADCA_VREFBUF_BIT, n)
#define ADCA_TIMER_RSTN_DLY_SHIFT           8
#define ADCA_TIMER_RSTN_DLY_MASK            (0x3F << ADCA_TIMER_RSTN_DLY_SHIFT)
#define ADCA_TIMER_RSTN_DLY(n)              BITFIELD_VAL(ADCA_TIMER_RSTN_DLY, n)

// REG_69
#define ADCA_OPEN_TIMER_DLY_SHIFT           0
#define ADCA_OPEN_TIMER_DLY_MASK            (0xF << ADCA_OPEN_TIMER_DLY_SHIFT)
#define ADCA_OPEN_TIMER_DLY(n)              BITFIELD_VAL(ADCA_OPEN_TIMER_DLY, n)
#define ADCA_PRE_CHARGE_TIMER_DLY_SHIFT     4
#define ADCA_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << ADCA_PRE_CHARGE_TIMER_DLY_SHIFT)
#define ADCA_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(ADCA_PRE_CHARGE_TIMER_DLY, n)
#define REG_CODEC_ADCA_HP_MODE              (1 << 12)
#define REG_CODEC_ADCA_LP_MODE              (1 << 13)
#define REG_CODEC_ADCA_NP_MODE              (1 << 14)
#define REG_CODEC_ADCA_OP1_HP_MODE          (1 << 15)

// REG_6A
#define REG_RX_PGAA_EN                      (1 << 0)
#define REG_RX_PGAA_RESET                   (1 << 1)
#define CFG_RESET_PGAA_DR                   (1 << 2)
#define REG_RX_PGAA_2P5K_SEL                (1 << 3)
#define REG_RX_PGAA_7P5K_SEL                (1 << 4)
#define REG_RX_PGAA_10K_SEL                 (1 << 5)
#define REG_RX_PGAA_CHANSEL_SHIFT           6
#define REG_RX_PGAA_CHANSEL_MASK            (0x3 << REG_RX_PGAA_CHANSEL_SHIFT)
#define REG_RX_PGAA_CHANSEL(n)              BITFIELD_VAL(REG_RX_PGAA_CHANSEL, n)
#define REG_RX_PGAA_DACGAIN_SHIFT           8
#define REG_RX_PGAA_DACGAIN_MASK            (0x3 << REG_RX_PGAA_DACGAIN_SHIFT)
#define REG_RX_PGAA_DACGAIN(n)              BITFIELD_VAL(REG_RX_PGAA_DACGAIN, n)
#define REG_RX_PGAA_IBIT_OPA_SHIFT          10
#define REG_RX_PGAA_IBIT_OPA_MASK           (0x3 << REG_RX_PGAA_IBIT_OPA_SHIFT)
#define REG_RX_PGAA_IBIT_OPA(n)             BITFIELD_VAL(REG_RX_PGAA_IBIT_OPA, n)
#define REG_RX_PGAA_OFFSET_CAL_EN           (1 << 12)
#define REG_RX_PGAA_OP_C_SEL                (1 << 13)
#define REG_RX_PGAA_OP_GM_SEL               (1 << 14)
#define REG_RX_PGAA_OP_R_SEL                (1 << 15)

// REG_6B
#define REG_RX_PGAA_GAIN_SHIFT              0
#define REG_RX_PGAA_GAIN_MASK               (0xF << REG_RX_PGAA_GAIN_SHIFT)
#define REG_RX_PGAA_GAIN(n)                 BITFIELD_VAL(REG_RX_PGAA_GAIN, n)
#define REG_RX_PGAA_GAIN_UPDATE             (1 << 4)
#define REG_RX_PGAA_LARGEGAIN_SHIFT         5
#define REG_RX_PGAA_LARGEGAIN_MASK          (0xF << REG_RX_PGAA_LARGEGAIN_SHIFT)
#define REG_RX_PGAA_LARGEGAIN(n)            BITFIELD_VAL(REG_RX_PGAA_LARGEGAIN, n)
#define REG_RX_PGAA_LARGEGAIN_UPDATE        (1 << 9)
#define REG_RX_PGAA_DRE_SHIFT               10
#define REG_RX_PGAA_DRE_MASK                (0xF << REG_RX_PGAA_DRE_SHIFT)
#define REG_RX_PGAA_DRE(n)                  BITFIELD_VAL(REG_RX_PGAA_DRE, n)
#define REG_RX_PGAA_DRE_DR                  (1 << 14)
#define REG_RX_PGAA_DRE_UPDATE              (1 << 15)

// REG_6C
#define REG_RX_PGAA_RFB_EN                  (1 << 0)
#define REG_RX_PGAA_LP_PGA_LV_SHIFT         1
#define REG_RX_PGAA_LP_PGA_LV_MASK          (0x7 << REG_RX_PGAA_LP_PGA_LV_SHIFT)
#define REG_RX_PGAA_LP_PGA_LV(n)            BITFIELD_VAL(REG_RX_PGAA_LP_PGA_LV, n)
#define REG_RX_PGAA_PRE_CHARGE              (1 << 4)
#define CFG_RX_PGAA_PRE_CHARGE_DR           (1 << 5)
#define PGAA_PRE_CHARGE_TIMER_DLY_SHIFT     6
#define PGAA_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << PGAA_PRE_CHARGE_TIMER_DLY_SHIFT)
#define PGAA_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(PGAA_PRE_CHARGE_TIMER_DLY, n)



// REG_6F
#define CHIP_ADDR_I2C_SHIFT                 0
#define CHIP_ADDR_I2C_MASK                  (0x7F << CHIP_ADDR_I2C_SHIFT)
#define CHIP_ADDR_I2C(n)                    BITFIELD_VAL(CHIP_ADDR_I2C, n)



// REG_71
#define REG_CODEC_EN_ADCB                   (1 << 0)
#define REG_CODEC_RESET_ADCB                (1 << 1)
#define CFG_RESET_ADCB_DR                   (1 << 2)
#define REG_CODEC_IDETB_EN                  (1 << 3)
#define REG_CODEC_ADCB_CLK_SEL              (1 << 4)
#define REG_CODEC_ADCB_CH_SEL_SHIFT         5
#define REG_CODEC_ADCB_CH_SEL_MASK          (0x3 << REG_CODEC_ADCB_CH_SEL_SHIFT)
#define REG_CODEC_ADCB_CH_SEL(n)            BITFIELD_VAL(REG_CODEC_ADCB_CH_SEL, n)
#define REG_CODEC_ADCB_DITHER_BIT_EN        (1 << 7)
#define CFG_ADCB_DITHER_CLK_INV             (1 << 8)
#define REG_CODEC_ADCB_GAIN_UPDATE          (1 << 9)
#define REG_CODEC_ADCB_GAIN_BIT_SHIFT       10
#define REG_CODEC_ADCB_GAIN_BIT_MASK        (0x7 << REG_CODEC_ADCB_GAIN_BIT_SHIFT)
#define REG_CODEC_ADCB_GAIN_BIT(n)          BITFIELD_VAL(REG_CODEC_ADCB_GAIN_BIT, n)
#define REG_CODEC_ADCB_PRE_CHARGE           (1 << 13)
#define CFG_PRE_CHARGE_ADCB_DR              (1 << 14)
#define REG_RX_ADCB_ZERO_DET_EN             (1 << 15)

// REG_72
#define REG_CODEC_ADCB_RES_2P5K_DR          (1 << 0)
#define REG_CODEC_ADCB_RES_2P5K_UPDATE      (1 << 1)
#define REG_CODEC_ADCB_RES_2P5K             (1 << 2)
#define REG_CODEC_ADCB_CAP_BIT1_SHIFT       3
#define REG_CODEC_ADCB_CAP_BIT1_MASK        (0x7F << REG_CODEC_ADCB_CAP_BIT1_SHIFT)
#define REG_CODEC_ADCB_CAP_BIT1(n)          BITFIELD_VAL(REG_CODEC_ADCB_CAP_BIT1, n)
#define REG_CODEC_ADCB_CAP_BIT2_SHIFT       10
#define REG_CODEC_ADCB_CAP_BIT2_MASK        (0x1F << REG_CODEC_ADCB_CAP_BIT2_SHIFT)
#define REG_CODEC_ADCB_CAP_BIT2(n)          BITFIELD_VAL(REG_CODEC_ADCB_CAP_BIT2, n)

// REG_73
#define REG_CODEC_ADCB_CAP_BIT3_SHIFT       0
#define REG_CODEC_ADCB_CAP_BIT3_MASK        (0x1F << REG_CODEC_ADCB_CAP_BIT3_SHIFT)
#define REG_CODEC_ADCB_CAP_BIT3(n)          BITFIELD_VAL(REG_CODEC_ADCB_CAP_BIT3, n)
#define REG_CODEC_ADCB_OP1_IBIT_SHIFT       5
#define REG_CODEC_ADCB_OP1_IBIT_MASK        (0x3 << REG_CODEC_ADCB_OP1_IBIT_SHIFT)
#define REG_CODEC_ADCB_OP1_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCB_OP1_IBIT, n)
#define REG_CODEC_ADCB_OP2_IBIT_SHIFT       7
#define REG_CODEC_ADCB_OP2_IBIT_MASK        (0x3 << REG_CODEC_ADCB_OP2_IBIT_SHIFT)
#define REG_CODEC_ADCB_OP2_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCB_OP2_IBIT, n)
#define REG_CODEC_ADCB_OP3_IBIT_SHIFT       9
#define REG_CODEC_ADCB_OP3_IBIT_MASK        (0x3 << REG_CODEC_ADCB_OP3_IBIT_SHIFT)
#define REG_CODEC_ADCB_OP3_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCB_OP3_IBIT, n)
#define REG_CODEC_ADCB_OP4_IBIT_SHIFT       11
#define REG_CODEC_ADCB_OP4_IBIT_MASK        (0x3 << REG_CODEC_ADCB_OP4_IBIT_SHIFT)
#define REG_CODEC_ADCB_OP4_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCB_OP4_IBIT, n)
#define REG_CODEC_ADCB_REG_VSEL_SHIFT       13
#define REG_CODEC_ADCB_REG_VSEL_MASK        (0x7 << REG_CODEC_ADCB_REG_VSEL_SHIFT)
#define REG_CODEC_ADCB_REG_VSEL(n)          BITFIELD_VAL(REG_CODEC_ADCB_REG_VSEL, n)

// REG_74
#define REG_CODEC_ADCB_IBSEL_OFFSET_SHIFT   0
#define REG_CODEC_ADCB_IBSEL_OFFSET_MASK    (0xF << REG_CODEC_ADCB_IBSEL_OFFSET_SHIFT)
#define REG_CODEC_ADCB_IBSEL_OFFSET(n)      BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_OFFSET, n)
#define REG_CODEC_ADCB_IBSEL_OP1_SHIFT      4
#define REG_CODEC_ADCB_IBSEL_OP1_MASK       (0xF << REG_CODEC_ADCB_IBSEL_OP1_SHIFT)
#define REG_CODEC_ADCB_IBSEL_OP1(n)         BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_OP1, n)
#define REG_CODEC_ADCB_IBSEL_OP2_SHIFT      8
#define REG_CODEC_ADCB_IBSEL_OP2_MASK       (0xF << REG_CODEC_ADCB_IBSEL_OP2_SHIFT)
#define REG_CODEC_ADCB_IBSEL_OP2(n)         BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_OP2, n)
#define REG_CODEC_ADCB_IBSEL_OP3_SHIFT      12
#define REG_CODEC_ADCB_IBSEL_OP3_MASK       (0xF << REG_CODEC_ADCB_IBSEL_OP3_SHIFT)
#define REG_CODEC_ADCB_IBSEL_OP3(n)         BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_OP3, n)

// REG_75
#define REG_CODEC_ADCB_IBSEL_OP4_SHIFT      0
#define REG_CODEC_ADCB_IBSEL_OP4_MASK       (0xF << REG_CODEC_ADCB_IBSEL_OP4_SHIFT)
#define REG_CODEC_ADCB_IBSEL_OP4(n)         BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_OP4, n)
#define REG_CODEC_ADCB_IBSEL_REG_SHIFT      4
#define REG_CODEC_ADCB_IBSEL_REG_MASK       (0xF << REG_CODEC_ADCB_IBSEL_REG_SHIFT)
#define REG_CODEC_ADCB_IBSEL_REG(n)         BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_REG, n)
#define REG_CODEC_ADCB_IBSEL_VCOMP_SHIFT    8
#define REG_CODEC_ADCB_IBSEL_VCOMP_MASK     (0xF << REG_CODEC_ADCB_IBSEL_VCOMP_SHIFT)
#define REG_CODEC_ADCB_IBSEL_VCOMP(n)       BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_VCOMP, n)
#define REG_CODEC_ADCB_IBSEL_VREF_SHIFT     12
#define REG_CODEC_ADCB_IBSEL_VREF_MASK      (0xF << REG_CODEC_ADCB_IBSEL_VREF_SHIFT)
#define REG_CODEC_ADCB_IBSEL_VREF(n)        BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_VREF, n)

// REG_76
#define REG_CODEC_ADCB_IBSEL_VREFBUF_SHIFT  0
#define REG_CODEC_ADCB_IBSEL_VREFBUF_MASK   (0xF << REG_CODEC_ADCB_IBSEL_VREFBUF_SHIFT)
#define REG_CODEC_ADCB_IBSEL_VREFBUF(n)     BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_VREFBUF, n)
#define REG_CODEC_ADCB_IBSEL_IDAC2_SHIFT    4
#define REG_CODEC_ADCB_IBSEL_IDAC2_MASK     (0xF << REG_CODEC_ADCB_IBSEL_IDAC2_SHIFT)
#define REG_CODEC_ADCB_IBSEL_IDAC2(n)       BITFIELD_VAL(REG_CODEC_ADCB_IBSEL_IDAC2, n)
#define REG_CODEC_ADCB_OFFSET_CAL_S_SHIFT   8
#define REG_CODEC_ADCB_OFFSET_CAL_S_MASK    (0x1F << REG_CODEC_ADCB_OFFSET_CAL_S_SHIFT)
#define REG_CODEC_ADCB_OFFSET_CAL_S(n)      BITFIELD_VAL(REG_CODEC_ADCB_OFFSET_CAL_S, n)
#define REG_CODEC_ADCB_OFFSET_CURRENT_EN    (1 << 13)
#define REG_CODEC_ADCB_OFFSET_CURRENT_SEL   (1 << 14)
#define REG_CODEC_ADCB_OFFSET_SW_EN         (1 << 15)

// REG_77
#define REG_CODEC_ADCB_OFFSET_BIT_SHIFT     0
#define REG_CODEC_ADCB_OFFSET_BIT_MASK      (0x3FFF << REG_CODEC_ADCB_OFFSET_BIT_SHIFT)
#define REG_CODEC_ADCB_OFFSET_BIT(n)        BITFIELD_VAL(REG_CODEC_ADCB_OFFSET_BIT, n)
#define REG_CODEC_ADCB_DVDD_SEL             (1 << 14)
#define REG_CODEC_ADCB_PU_REG               (1 << 15)

// REG_78
#define REG_CODEC_ADCB_VREF_SEL_SHIFT       0
#define REG_CODEC_ADCB_VREF_SEL_MASK        (0xF << REG_CODEC_ADCB_VREF_SEL_SHIFT)
#define REG_CODEC_ADCB_VREF_SEL(n)          BITFIELD_VAL(REG_CODEC_ADCB_VREF_SEL, n)
#define REG_CODEC_ADCB_VREFBUF_BIT_SHIFT    4
#define REG_CODEC_ADCB_VREFBUF_BIT_MASK     (0xF << REG_CODEC_ADCB_VREFBUF_BIT_SHIFT)
#define REG_CODEC_ADCB_VREFBUF_BIT(n)       BITFIELD_VAL(REG_CODEC_ADCB_VREFBUF_BIT, n)
#define ADCB_TIMER_RSTN_DLY_SHIFT           8
#define ADCB_TIMER_RSTN_DLY_MASK            (0x3F << ADCB_TIMER_RSTN_DLY_SHIFT)
#define ADCB_TIMER_RSTN_DLY(n)              BITFIELD_VAL(ADCB_TIMER_RSTN_DLY, n)


// REG_79
#define ADCB_OPEN_TIMER_DLY_SHIFT           0
#define ADCB_OPEN_TIMER_DLY_MASK            (0xF << ADCB_OPEN_TIMER_DLY_SHIFT)
#define ADCB_OPEN_TIMER_DLY(n)              BITFIELD_VAL(ADCB_OPEN_TIMER_DLY, n)
#define ADCB_PRE_CHARGE_TIMER_DLY_SHIFT     4
#define ADCB_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << ADCB_PRE_CHARGE_TIMER_DLY_SHIFT)
#define ADCB_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(ADCB_PRE_CHARGE_TIMER_DLY, n)
#define REG_CODEC_ADCB_HP_MODE              (1 << 12)
#define REG_CODEC_ADCB_LP_MODE              (1 << 13)
#define REG_CODEC_ADCB_NP_MODE              (1 << 14)
#define REG_CODEC_ADCB_OP1_HP_MODE          (1 << 15)

// REG_7A
#define REG_RX_PGAB_EN                      (1 << 0)
#define REG_RX_PGAB_RESET                   (1 << 1)
#define CFG_RESET_PGAB_DR                   (1 << 2)
#define REG_RX_PGAB_2P5K_SEL                (1 << 3)
#define REG_RX_PGAB_7P5K_SEL                (1 << 4)
#define REG_RX_PGAB_10K_SEL                 (1 << 5)
#define REG_RX_PGAB_CHANSEL_SHIFT           6
#define REG_RX_PGAB_CHANSEL_MASK            (0x3 << REG_RX_PGAB_CHANSEL_SHIFT)
#define REG_RX_PGAB_CHANSEL(n)              BITFIELD_VAL(REG_RX_PGAB_CHANSEL, n)
#define REG_RX_PGAB_DACGAIN_SHIFT           8
#define REG_RX_PGAB_DACGAIN_MASK            (0x3 << REG_RX_PGAB_DACGAIN_SHIFT)
#define REG_RX_PGAB_DACGAIN(n)              BITFIELD_VAL(REG_RX_PGAB_DACGAIN, n)
#define REG_RX_PGAB_IBIT_OPA_SHIFT          10
#define REG_RX_PGAB_IBIT_OPA_MASK           (0x3 << REG_RX_PGAB_IBIT_OPA_SHIFT)
#define REG_RX_PGAB_IBIT_OPA(n)             BITFIELD_VAL(REG_RX_PGAB_IBIT_OPA, n)
#define REG_RX_PGAB_OFFSET_CAL_EN           (1 << 12)
#define REG_RX_PGAB_OP_C_SEL                (1 << 13)
#define REG_RX_PGAB_OP_GM_SEL               (1 << 14)
#define REG_RX_PGAB_OP_R_SEL                (1 << 15)

// REG_7B
#define REG_RX_PGAB_GAIN_SHIFT              0
#define REG_RX_PGAB_GAIN_MASK               (0xF << REG_RX_PGAB_GAIN_SHIFT)
#define REG_RX_PGAB_GAIN(n)                 BITFIELD_VAL(REG_RX_PGAB_GAIN, n)
#define REG_RX_PGAB_GAIN_UPDATE             (1 << 4)
#define REG_RX_PGAB_LARGEGAIN_SHIFT         5
#define REG_RX_PGAB_LARGEGAIN_MASK          (0xF << REG_RX_PGAB_LARGEGAIN_SHIFT)
#define REG_RX_PGAB_LARGEGAIN(n)            BITFIELD_VAL(REG_RX_PGAB_LARGEGAIN, n)
#define REG_RX_PGAB_LARGEGAIN_UPDATE        (1 << 9)
#define REG_RX_PGAB_DRE_SHIFT               10
#define REG_RX_PGAB_DRE_MASK                (0xF << REG_RX_PGAB_DRE_SHIFT)
#define REG_RX_PGAB_DRE(n)                  BITFIELD_VAL(REG_RX_PGAB_DRE, n)
#define REG_RX_PGAB_DRE_DR                  (1 << 14)
#define REG_RX_PGAB_DRE_UPDATE              (1 << 15)

// REG_7C
#define REG_RX_PGAB_RFB_EN                  (1 << 0)
#define REG_RX_PGAB_LP_PGA_LV_SHIFT         1
#define REG_RX_PGAB_LP_PGA_LV_MASK          (0x7 << REG_RX_PGAB_LP_PGA_LV_SHIFT)
#define REG_RX_PGAB_LP_PGA_LV(n)            BITFIELD_VAL(REG_RX_PGAB_LP_PGA_LV, n)
#define REG_RX_PGAB_PRE_CHARGE              (1 << 4)
#define CFG_RX_PGAB_PRE_CHARGE_DR           (1 << 5)
#define PGAB_PRE_CHARGE_TIMER_DLY_SHIFT     6
#define PGAB_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << PGAB_PRE_CHARGE_TIMER_DLY_SHIFT)
#define PGAB_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(PGAB_PRE_CHARGE_TIMER_DLY, n)


// REG_81
#define REG_CODEC_EN_ADCC                   (1 << 0)
#define REG_CODEC_RESET_ADCC                (1 << 1)
#define CFG_RESET_ADCC_DR                   (1 << 2)
#define REG_CODEC_IDETC_EN                  (1 << 3)
#define REG_CODEC_ADCC_CLK_SEL              (1 << 4)
#define REG_CODEC_ADCC_CH_SEL_SHIFT         5
#define REG_CODEC_ADCC_CH_SEL_MASK          (0x3 << REG_CODEC_ADCC_CH_SEL_SHIFT)
#define REG_CODEC_ADCC_CH_SEL(n)            BITFIELD_VAL(REG_CODEC_ADCC_CH_SEL, n)
#define REG_CODEC_ADCC_DITHER_BIT_EN        (1 << 7)
#define CFG_ADCC_DITHER_CLK_INV             (1 << 8)
#define REG_CODEC_ADCC_GAIN_UPDATE          (1 << 9)
#define REG_CODEC_ADCC_GAIN_BIT_SHIFT       10
#define REG_CODEC_ADCC_GAIN_BIT_MASK        (0x7 << REG_CODEC_ADCC_GAIN_BIT_SHIFT)
#define REG_CODEC_ADCC_GAIN_BIT(n)          BITFIELD_VAL(REG_CODEC_ADCC_GAIN_BIT, n)
#define REG_CODEC_ADCC_PRE_CHARGE           (1 << 13)
#define CFG_PRE_CHARGE_ADCC_DR              (1 << 14)
#define REG_RX_ADCC_ZERO_DET_EN             (1 << 15)

// REG_82
#define REG_CODEC_ADCC_RES_2P5K_DR          (1 << 0)
#define REG_CODEC_ADCC_RES_2P5K_UPDATE      (1 << 1)
#define REG_CODEC_ADCC_RES_2P5K             (1 << 2)
#define REG_CODEC_ADCC_CAP_BIT1_SHIFT       3
#define REG_CODEC_ADCC_CAP_BIT1_MASK        (0x7F << REG_CODEC_ADCC_CAP_BIT1_SHIFT)
#define REG_CODEC_ADCC_CAP_BIT1(n)          BITFIELD_VAL(REG_CODEC_ADCC_CAP_BIT1, n)
#define REG_CODEC_ADCC_CAP_BIT2_SHIFT       10
#define REG_CODEC_ADCC_CAP_BIT2_MASK        (0x1F << REG_CODEC_ADCC_CAP_BIT2_SHIFT)
#define REG_CODEC_ADCC_CAP_BIT2(n)          BITFIELD_VAL(REG_CODEC_ADCC_CAP_BIT2, n)

// REG_83
#define REG_CODEC_ADCC_CAP_BIT3_SHIFT       0
#define REG_CODEC_ADCC_CAP_BIT3_MASK        (0x1F << REG_CODEC_ADCC_CAP_BIT3_SHIFT)
#define REG_CODEC_ADCC_CAP_BIT3(n)          BITFIELD_VAL(REG_CODEC_ADCC_CAP_BIT3, n)
#define REG_CODEC_ADCC_OP1_IBIT_SHIFT       5
#define REG_CODEC_ADCC_OP1_IBIT_MASK        (0x3 << REG_CODEC_ADCC_OP1_IBIT_SHIFT)
#define REG_CODEC_ADCC_OP1_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCC_OP1_IBIT, n)
#define REG_CODEC_ADCC_OP2_IBIT_SHIFT       7
#define REG_CODEC_ADCC_OP2_IBIT_MASK        (0x3 << REG_CODEC_ADCC_OP2_IBIT_SHIFT)
#define REG_CODEC_ADCC_OP2_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCC_OP2_IBIT, n)
#define REG_CODEC_ADCC_OP3_IBIT_SHIFT       9
#define REG_CODEC_ADCC_OP3_IBIT_MASK        (0x3 << REG_CODEC_ADCC_OP3_IBIT_SHIFT)
#define REG_CODEC_ADCC_OP3_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCC_OP3_IBIT, n)
#define REG_CODEC_ADCC_OP4_IBIT_SHIFT       11
#define REG_CODEC_ADCC_OP4_IBIT_MASK        (0x3 << REG_CODEC_ADCC_OP4_IBIT_SHIFT)
#define REG_CODEC_ADCC_OP4_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCC_OP4_IBIT, n)
#define REG_CODEC_ADCC_REG_VSEL_SHIFT       13
#define REG_CODEC_ADCC_REG_VSEL_MASK        (0x7 << REG_CODEC_ADCC_REG_VSEL_SHIFT)
#define REG_CODEC_ADCC_REG_VSEL(n)          BITFIELD_VAL(REG_CODEC_ADCC_REG_VSEL, n)

// REG_84
#define REG_CODEC_ADCC_IBSEL_OFFSET_SHIFT   0
#define REG_CODEC_ADCC_IBSEL_OFFSET_MASK    (0xF << REG_CODEC_ADCC_IBSEL_OFFSET_SHIFT)
#define REG_CODEC_ADCC_IBSEL_OFFSET(n)      BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_OFFSET, n)
#define REG_CODEC_ADCC_IBSEL_OP1_SHIFT      4
#define REG_CODEC_ADCC_IBSEL_OP1_MASK       (0xF << REG_CODEC_ADCC_IBSEL_OP1_SHIFT)
#define REG_CODEC_ADCC_IBSEL_OP1(n)         BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_OP1, n)
#define REG_CODEC_ADCC_IBSEL_OP2_SHIFT      8
#define REG_CODEC_ADCC_IBSEL_OP2_MASK       (0xF << REG_CODEC_ADCC_IBSEL_OP2_SHIFT)
#define REG_CODEC_ADCC_IBSEL_OP2(n)         BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_OP2, n)
#define REG_CODEC_ADCC_IBSEL_OP3_SHIFT      12
#define REG_CODEC_ADCC_IBSEL_OP3_MASK       (0xF << REG_CODEC_ADCC_IBSEL_OP3_SHIFT)
#define REG_CODEC_ADCC_IBSEL_OP3(n)         BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_OP3, n)

// REG_85
#define REG_CODEC_ADCC_IBSEL_OP4_SHIFT      0
#define REG_CODEC_ADCC_IBSEL_OP4_MASK       (0xF << REG_CODEC_ADCC_IBSEL_OP4_SHIFT)
#define REG_CODEC_ADCC_IBSEL_OP4(n)         BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_OP4, n)
#define REG_CODEC_ADCC_IBSEL_REG_SHIFT      4
#define REG_CODEC_ADCC_IBSEL_REG_MASK       (0xF << REG_CODEC_ADCC_IBSEL_REG_SHIFT)
#define REG_CODEC_ADCC_IBSEL_REG(n)         BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_REG, n)
#define REG_CODEC_ADCC_IBSEL_VCOMP_SHIFT    8
#define REG_CODEC_ADCC_IBSEL_VCOMP_MASK     (0xF << REG_CODEC_ADCC_IBSEL_VCOMP_SHIFT)
#define REG_CODEC_ADCC_IBSEL_VCOMP(n)       BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_VCOMP, n)
#define REG_CODEC_ADCC_IBSEL_VREF_SHIFT     12
#define REG_CODEC_ADCC_IBSEL_VREF_MASK      (0xF << REG_CODEC_ADCC_IBSEL_VREF_SHIFT)
#define REG_CODEC_ADCC_IBSEL_VREF(n)        BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_VREF, n)

// REG_86
#define REG_CODEC_ADCC_IBSEL_VREFBUF_SHIFT  0
#define REG_CODEC_ADCC_IBSEL_VREFBUF_MASK   (0xF << REG_CODEC_ADCC_IBSEL_VREFBUF_SHIFT)
#define REG_CODEC_ADCC_IBSEL_VREFBUF(n)     BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_VREFBUF, n)
#define REG_CODEC_ADCC_IBSEL_IDAC2_SHIFT    4
#define REG_CODEC_ADCC_IBSEL_IDAC2_MASK     (0xF << REG_CODEC_ADCC_IBSEL_IDAC2_SHIFT)
#define REG_CODEC_ADCC_IBSEL_IDAC2(n)       BITFIELD_VAL(REG_CODEC_ADCC_IBSEL_IDAC2, n)
#define REG_CODEC_ADCC_OFFSET_CAL_S_SHIFT   8
#define REG_CODEC_ADCC_OFFSET_CAL_S_MASK    (0x1F << REG_CODEC_ADCC_OFFSET_CAL_S_SHIFT)
#define REG_CODEC_ADCC_OFFSET_CAL_S(n)      BITFIELD_VAL(REG_CODEC_ADCC_OFFSET_CAL_S, n)
#define REG_CODEC_ADCC_OFFSET_CURRENT_EN    (1 << 13)
#define REG_CODEC_ADCC_OFFSET_CURRENT_SEL   (1 << 14)
#define REG_CODEC_ADCC_OFFSET_SW_EN         (1 << 15)

// REG_87
#define REG_CODEC_ADCC_OFFSET_BIT_SHIFT     0
#define REG_CODEC_ADCC_OFFSET_BIT_MASK      (0x3FFF << REG_CODEC_ADCC_OFFSET_BIT_SHIFT)
#define REG_CODEC_ADCC_OFFSET_BIT(n)        BITFIELD_VAL(REG_CODEC_ADCC_OFFSET_BIT, n)
#define REG_CODEC_ADCC_DVDD_SEL             (1 << 14)
#define REG_CODEC_ADCC_PU_REG               (1 << 15)

// REG_88
#define REG_CODEC_ADCC_VREF_SEL_SHIFT       0
#define REG_CODEC_ADCC_VREF_SEL_MASK        (0xF << REG_CODEC_ADCC_VREF_SEL_SHIFT)
#define REG_CODEC_ADCC_VREF_SEL(n)          BITFIELD_VAL(REG_CODEC_ADCC_VREF_SEL, n)
#define REG_CODEC_ADCC_VREFBUF_BIT_SHIFT    4
#define REG_CODEC_ADCC_VREFBUF_BIT_MASK     (0xF << REG_CODEC_ADCC_VREFBUF_BIT_SHIFT)
#define REG_CODEC_ADCC_VREFBUF_BIT(n)       BITFIELD_VAL(REG_CODEC_ADCC_VREFBUF_BIT, n)
#define ADCC_TIMER_RSTN_DLY_SHIFT           8
#define ADCC_TIMER_RSTN_DLY_MASK            (0x3F << ADCC_TIMER_RSTN_DLY_SHIFT)
#define ADCC_TIMER_RSTN_DLY(n)              BITFIELD_VAL(ADCC_TIMER_RSTN_DLY, n)


// REG_89
#define ADCC_OPEN_TIMER_DLY_SHIFT           0
#define ADCC_OPEN_TIMER_DLY_MASK            (0xF << ADCC_OPEN_TIMER_DLY_SHIFT)
#define ADCC_OPEN_TIMER_DLY(n)              BITFIELD_VAL(ADCC_OPEN_TIMER_DLY, n)
#define ADCC_PRE_CHARGE_TIMER_DLY_SHIFT     4
#define ADCC_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << ADCC_PRE_CHARGE_TIMER_DLY_SHIFT)
#define ADCC_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(ADCC_PRE_CHARGE_TIMER_DLY, n)
#define REG_CODEC_ADCC_HP_MODE              (1 << 12)
#define REG_CODEC_ADCC_LP_MODE              (1 << 13)
#define REG_CODEC_ADCC_NP_MODE              (1 << 14)
#define REG_CODEC_ADCC_OP1_HP_MODE          (1 << 15)

// REG_8A
#define REG_RX_PGAC_EN                      (1 << 0)
#define REG_RX_PGAC_RESET                   (1 << 1)
#define CFG_RESET_PGAC_DR                   (1 << 2)
#define REG_RX_PGAC_2P5K_SEL                (1 << 3)
#define REG_RX_PGAC_7P5K_SEL                (1 << 4)
#define REG_RX_PGAC_10K_SEL                 (1 << 5)
#define REG_RX_PGAC_CHANSEL_SHIFT           6
#define REG_RX_PGAC_CHANSEL_MASK            (0x3 << REG_RX_PGAC_CHANSEL_SHIFT)
#define REG_RX_PGAC_CHANSEL(n)              BITFIELD_VAL(REG_RX_PGAC_CHANSEL, n)
#define REG_RX_PGAC_DACGAIN_SHIFT           8
#define REG_RX_PGAC_DACGAIN_MASK            (0x3 << REG_RX_PGAC_DACGAIN_SHIFT)
#define REG_RX_PGAC_DACGAIN(n)              BITFIELD_VAL(REG_RX_PGAC_DACGAIN, n)
#define REG_RX_PGAC_IBIT_OPA_SHIFT          10
#define REG_RX_PGAC_IBIT_OPA_MASK           (0x3 << REG_RX_PGAC_IBIT_OPA_SHIFT)
#define REG_RX_PGAC_IBIT_OPA(n)             BITFIELD_VAL(REG_RX_PGAC_IBIT_OPA, n)
#define REG_RX_PGAC_OFFSET_CAL_EN           (1 << 12)
#define REG_RX_PGAC_OP_C_SEL                (1 << 13)
#define REG_RX_PGAC_OP_GM_SEL               (1 << 14)
#define REG_RX_PGAC_OP_R_SEL                (1 << 15)

// REG_8B
#define REG_RX_PGAC_GAIN_SHIFT              0
#define REG_RX_PGAC_GAIN_MASK               (0xF << REG_RX_PGAC_GAIN_SHIFT)
#define REG_RX_PGAC_GAIN(n)                 BITFIELD_VAL(REG_RX_PGAC_GAIN, n)
#define REG_RX_PGAC_GAIN_UPDATE             (1 << 4)
#define REG_RX_PGAC_LARGEGAIN_SHIFT         5
#define REG_RX_PGAC_LARGEGAIN_MASK          (0xF << REG_RX_PGAC_LARGEGAIN_SHIFT)
#define REG_RX_PGAC_LARGEGAIN(n)            BITFIELD_VAL(REG_RX_PGAC_LARGEGAIN, n)
#define REG_RX_PGAC_LARGEGAIN_UPDATE        (1 << 9)
#define REG_RX_PGAC_DRE_SHIFT               10
#define REG_RX_PGAC_DRE_MASK                (0xF << REG_RX_PGAC_DRE_SHIFT)
#define REG_RX_PGAC_DRE(n)                  BITFIELD_VAL(REG_RX_PGAC_DRE, n)
#define REG_RX_PGAC_DRE_DR                  (1 << 14)
#define REG_RX_PGAC_DRE_UPDATE              (1 << 15)

// REG_8C
#define REG_RX_PGAC_RFB_EN                  (1 << 0)
#define REG_RX_PGAC_LP_PGA_LV_SHIFT         1
#define REG_RX_PGAC_LP_PGA_LV_MASK          (0x7 << REG_RX_PGAC_LP_PGA_LV_SHIFT)
#define REG_RX_PGAC_LP_PGA_LV(n)            BITFIELD_VAL(REG_RX_PGAC_LP_PGA_LV, n)
#define REG_RX_PGAC_PRE_CHARGE              (1 << 4)
#define CFG_RX_PGAC_PRE_CHARGE_DR           (1 << 5)
#define PGAC_PRE_CHARGE_TIMER_DLY_SHIFT     6
#define PGAC_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << PGAC_PRE_CHARGE_TIMER_DLY_SHIFT)
#define PGAC_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(PGAC_PRE_CHARGE_TIMER_DLY, n)



// REG_91
#define REG_CODEC_EN_ADCD                   (1 << 0)
#define REG_CODEC_RESET_ADCD                (1 << 1)
#define CFG_RESET_ADCD_DR                   (1 << 2)
#define REG_CODEC_IDETD_EN                  (1 << 3)
#define REG_CODEC_ADCD_CLK_SEL              (1 << 4)
#define REG_CODEC_ADCD_CH_SEL_SHIFT         5
#define REG_CODEC_ADCD_CH_SEL_MASK          (0x3 << REG_CODEC_ADCD_CH_SEL_SHIFT)
#define REG_CODEC_ADCD_CH_SEL(n)            BITFIELD_VAL(REG_CODEC_ADCD_CH_SEL, n)
#define REG_CODEC_ADCD_DITHER_BIT_EN        (1 << 7)
#define CFG_ADCD_DITHER_CLK_INV             (1 << 8)
#define REG_CODEC_ADCD_GAIN_UPDATE          (1 << 9)
#define REG_CODEC_ADCD_GAIN_BIT_SHIFT       10
#define REG_CODEC_ADCD_GAIN_BIT_MASK        (0x7 << REG_CODEC_ADCD_GAIN_BIT_SHIFT)
#define REG_CODEC_ADCD_GAIN_BIT(n)          BITFIELD_VAL(REG_CODEC_ADCD_GAIN_BIT, n)
#define REG_CODEC_ADCD_PRE_CHARGE           (1 << 13)
#define CFG_PRE_CHARGE_ADCD_DR              (1 << 14)
#define REG_RX_ADCD_ZERO_DET_EN             (1 << 15)

// REG_92
#define REG_CODEC_ADCD_RES_2P5K_DR          (1 << 0)
#define REG_CODEC_ADCD_RES_2P5K_UPDATE      (1 << 1)
#define REG_CODEC_ADCD_RES_2P5K             (1 << 2)
#define REG_CODEC_ADCD_CAP_BIT1_SHIFT       3
#define REG_CODEC_ADCD_CAP_BIT1_MASK        (0x7F << REG_CODEC_ADCD_CAP_BIT1_SHIFT)
#define REG_CODEC_ADCD_CAP_BIT1(n)          BITFIELD_VAL(REG_CODEC_ADCD_CAP_BIT1, n)
#define REG_CODEC_ADCD_CAP_BIT2_SHIFT       10
#define REG_CODEC_ADCD_CAP_BIT2_MASK        (0x1F << REG_CODEC_ADCD_CAP_BIT2_SHIFT)
#define REG_CODEC_ADCD_CAP_BIT2(n)          BITFIELD_VAL(REG_CODEC_ADCD_CAP_BIT2, n)

// REG_93
#define REG_CODEC_ADCD_CAP_BIT3_SHIFT       0
#define REG_CODEC_ADCD_CAP_BIT3_MASK        (0x1F << REG_CODEC_ADCD_CAP_BIT3_SHIFT)
#define REG_CODEC_ADCD_CAP_BIT3(n)          BITFIELD_VAL(REG_CODEC_ADCD_CAP_BIT3, n)
#define REG_CODEC_ADCD_OP1_IBIT_SHIFT       5
#define REG_CODEC_ADCD_OP1_IBIT_MASK        (0x3 << REG_CODEC_ADCD_OP1_IBIT_SHIFT)
#define REG_CODEC_ADCD_OP1_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCD_OP1_IBIT, n)
#define REG_CODEC_ADCD_OP2_IBIT_SHIFT       7
#define REG_CODEC_ADCD_OP2_IBIT_MASK        (0x3 << REG_CODEC_ADCD_OP2_IBIT_SHIFT)
#define REG_CODEC_ADCD_OP2_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCD_OP2_IBIT, n)
#define REG_CODEC_ADCD_OP3_IBIT_SHIFT       9
#define REG_CODEC_ADCD_OP3_IBIT_MASK        (0x3 << REG_CODEC_ADCD_OP3_IBIT_SHIFT)
#define REG_CODEC_ADCD_OP3_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCD_OP3_IBIT, n)
#define REG_CODEC_ADCD_OP4_IBIT_SHIFT       11
#define REG_CODEC_ADCD_OP4_IBIT_MASK        (0x3 << REG_CODEC_ADCD_OP4_IBIT_SHIFT)
#define REG_CODEC_ADCD_OP4_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCD_OP4_IBIT, n)
#define REG_CODEC_ADCD_REG_VSEL_SHIFT       13
#define REG_CODEC_ADCD_REG_VSEL_MASK        (0x7 << REG_CODEC_ADCD_REG_VSEL_SHIFT)
#define REG_CODEC_ADCD_REG_VSEL(n)          BITFIELD_VAL(REG_CODEC_ADCD_REG_VSEL, n)

// REG_94
#define REG_CODEC_ADCD_IBSEL_OFFSET_SHIFT   0
#define REG_CODEC_ADCD_IBSEL_OFFSET_MASK    (0xF << REG_CODEC_ADCD_IBSEL_OFFSET_SHIFT)
#define REG_CODEC_ADCD_IBSEL_OFFSET(n)      BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_OFFSET, n)
#define REG_CODEC_ADCD_IBSEL_OP1_SHIFT      4
#define REG_CODEC_ADCD_IBSEL_OP1_MASK       (0xF << REG_CODEC_ADCD_IBSEL_OP1_SHIFT)
#define REG_CODEC_ADCD_IBSEL_OP1(n)         BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_OP1, n)
#define REG_CODEC_ADCD_IBSEL_OP2_SHIFT      8
#define REG_CODEC_ADCD_IBSEL_OP2_MASK       (0xF << REG_CODEC_ADCD_IBSEL_OP2_SHIFT)
#define REG_CODEC_ADCD_IBSEL_OP2(n)         BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_OP2, n)
#define REG_CODEC_ADCD_IBSEL_OP3_SHIFT      12
#define REG_CODEC_ADCD_IBSEL_OP3_MASK       (0xF << REG_CODEC_ADCD_IBSEL_OP3_SHIFT)
#define REG_CODEC_ADCD_IBSEL_OP3(n)         BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_OP3, n)

// REG_95
#define REG_CODEC_ADCD_IBSEL_OP4_SHIFT      0
#define REG_CODEC_ADCD_IBSEL_OP4_MASK       (0xF << REG_CODEC_ADCD_IBSEL_OP4_SHIFT)
#define REG_CODEC_ADCD_IBSEL_OP4(n)         BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_OP4, n)
#define REG_CODEC_ADCD_IBSEL_REG_SHIFT      4
#define REG_CODEC_ADCD_IBSEL_REG_MASK       (0xF << REG_CODEC_ADCD_IBSEL_REG_SHIFT)
#define REG_CODEC_ADCD_IBSEL_REG(n)         BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_REG, n)
#define REG_CODEC_ADCD_IBSEL_VCOMP_SHIFT    8
#define REG_CODEC_ADCD_IBSEL_VCOMP_MASK     (0xF << REG_CODEC_ADCD_IBSEL_VCOMP_SHIFT)
#define REG_CODEC_ADCD_IBSEL_VCOMP(n)       BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_VCOMP, n)
#define REG_CODEC_ADCD_IBSEL_VREF_SHIFT     12
#define REG_CODEC_ADCD_IBSEL_VREF_MASK      (0xF << REG_CODEC_ADCD_IBSEL_VREF_SHIFT)
#define REG_CODEC_ADCD_IBSEL_VREF(n)        BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_VREF, n)

// REG_96
#define REG_CODEC_ADCD_IBSEL_VREFBUF_SHIFT  0
#define REG_CODEC_ADCD_IBSEL_VREFBUF_MASK   (0xF << REG_CODEC_ADCD_IBSEL_VREFBUF_SHIFT)
#define REG_CODEC_ADCD_IBSEL_VREFBUF(n)     BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_VREFBUF, n)
#define REG_CODEC_ADCD_IBSEL_IDAC2_SHIFT    4
#define REG_CODEC_ADCD_IBSEL_IDAC2_MASK     (0xF << REG_CODEC_ADCD_IBSEL_IDAC2_SHIFT)
#define REG_CODEC_ADCD_IBSEL_IDAC2(n)       BITFIELD_VAL(REG_CODEC_ADCD_IBSEL_IDAC2, n)
#define REG_CODEC_ADCD_OFFSET_CAL_S_SHIFT   8
#define REG_CODEC_ADCD_OFFSET_CAL_S_MASK    (0x1F << REG_CODEC_ADCD_OFFSET_CAL_S_SHIFT)
#define REG_CODEC_ADCD_OFFSET_CAL_S(n)      BITFIELD_VAL(REG_CODEC_ADCD_OFFSET_CAL_S, n)
#define REG_CODEC_ADCD_OFFSET_CURRENT_EN    (1 << 13)
#define REG_CODEC_ADCD_OFFSET_CURRENT_SEL   (1 << 14)
#define REG_CODEC_ADCD_OFFSET_SW_EN         (1 << 15)

// REG_97
#define REG_CODEC_ADCD_OFFSET_BIT_SHIFT     0
#define REG_CODEC_ADCD_OFFSET_BIT_MASK      (0x3FFF << REG_CODEC_ADCD_OFFSET_BIT_SHIFT)
#define REG_CODEC_ADCD_OFFSET_BIT(n)        BITFIELD_VAL(REG_CODEC_ADCD_OFFSET_BIT, n)
#define REG_CODEC_ADCD_DVDD_SEL             (1 << 14)
#define REG_CODEC_ADCD_PU_REG               (1 << 15)

// REG_98
#define REG_CODEC_ADCD_VREF_SEL_SHIFT       0
#define REG_CODEC_ADCD_VREF_SEL_MASK        (0xF << REG_CODEC_ADCD_VREF_SEL_SHIFT)
#define REG_CODEC_ADCD_VREF_SEL(n)          BITFIELD_VAL(REG_CODEC_ADCD_VREF_SEL, n)
#define REG_CODEC_ADCD_VREFBUF_BIT_SHIFT    4
#define REG_CODEC_ADCD_VREFBUF_BIT_MASK     (0xF << REG_CODEC_ADCD_VREFBUF_BIT_SHIFT)
#define REG_CODEC_ADCD_VREFBUF_BIT(n)       BITFIELD_VAL(REG_CODEC_ADCD_VREFBUF_BIT, n)
#define ADCD_TIMER_RSTN_DLY_SHIFT           8
#define ADCD_TIMER_RSTN_DLY_MASK            (0x3F << ADCD_TIMER_RSTN_DLY_SHIFT)
#define ADCD_TIMER_RSTN_DLY(n)              BITFIELD_VAL(ADCD_TIMER_RSTN_DLY, n)


// REG_99
#define ADCD_OPEN_TIMER_DLY_SHIFT           0
#define ADCD_OPEN_TIMER_DLY_MASK            (0xF << ADCD_OPEN_TIMER_DLY_SHIFT)
#define ADCD_OPEN_TIMER_DLY(n)              BITFIELD_VAL(ADCD_OPEN_TIMER_DLY, n)
#define ADCD_PRE_CHARGE_TIMER_DLY_SHIFT     4
#define ADCD_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << ADCD_PRE_CHARGE_TIMER_DLY_SHIFT)
#define ADCD_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(ADCD_PRE_CHARGE_TIMER_DLY, n)
#define REG_CODEC_ADCD_HP_MODE              (1 << 12)
#define REG_CODEC_ADCD_LP_MODE              (1 << 13)
#define REG_CODEC_ADCD_NP_MODE              (1 << 14)
#define REG_CODEC_ADCD_OP1_HP_MODE          (1 << 15)

// REG_9A
#define REG_RX_PGAD_EN                      (1 << 0)
#define REG_RX_PGAD_RESET                   (1 << 1)
#define CFG_RESET_PGAD_DR                   (1 << 2)
#define REG_RX_PGAD_2P5K_SEL                (1 << 3)
#define REG_RX_PGAD_7P5K_SEL                (1 << 4)
#define REG_RX_PGAD_10K_SEL                 (1 << 5)
#define REG_RX_PGAD_CHANSEL_SHIFT           6
#define REG_RX_PGAD_CHANSEL_MASK            (0x3 << REG_RX_PGAD_CHANSEL_SHIFT)
#define REG_RX_PGAD_CHANSEL(n)              BITFIELD_VAL(REG_RX_PGAD_CHANSEL, n)
#define REG_RX_PGAD_DACGAIN_SHIFT           8
#define REG_RX_PGAD_DACGAIN_MASK            (0x3 << REG_RX_PGAD_DACGAIN_SHIFT)
#define REG_RX_PGAD_DACGAIN(n)              BITFIELD_VAL(REG_RX_PGAD_DACGAIN, n)
#define REG_RX_PGAD_IBIT_OPA_SHIFT          10
#define REG_RX_PGAD_IBIT_OPA_MASK           (0x3 << REG_RX_PGAD_IBIT_OPA_SHIFT)
#define REG_RX_PGAD_IBIT_OPA(n)             BITFIELD_VAL(REG_RX_PGAD_IBIT_OPA, n)
#define REG_RX_PGAD_OFFSET_CAL_EN           (1 << 12)
#define REG_RX_PGAD_OP_C_SEL                (1 << 13)
#define REG_RX_PGAD_OP_GM_SEL               (1 << 14)
#define REG_RX_PGAD_OP_R_SEL                (1 << 15)

// REG_9B
#define REG_RX_PGAD_GAIN_SHIFT              0
#define REG_RX_PGAD_GAIN_MASK               (0xF << REG_RX_PGAD_GAIN_SHIFT)
#define REG_RX_PGAD_GAIN(n)                 BITFIELD_VAL(REG_RX_PGAD_GAIN, n)
#define REG_RX_PGAD_GAIN_UPDATE             (1 << 4)
#define REG_RX_PGAD_LARGEGAIN_SHIFT         5
#define REG_RX_PGAD_LARGEGAIN_MASK          (0xF << REG_RX_PGAD_LARGEGAIN_SHIFT)
#define REG_RX_PGAD_LARGEGAIN(n)            BITFIELD_VAL(REG_RX_PGAD_LARGEGAIN, n)
#define REG_RX_PGAD_LARGEGAIN_UPDATE        (1 << 9)
#define REG_RX_PGAD_DRE_SHIFT               10
#define REG_RX_PGAD_DRE_MASK                (0xF << REG_RX_PGAD_DRE_SHIFT)
#define REG_RX_PGAD_DRE(n)                  BITFIELD_VAL(REG_RX_PGAD_DRE, n)
#define REG_RX_PGAD_DRE_DR                  (1 << 14)
#define REG_RX_PGAD_DRE_UPDATE              (1 << 15)

// REG_9C
#define REG_RX_PGAD_RFB_EN                  (1 << 0)
#define REG_RX_PGAD_LP_PGA_LV_SHIFT         1
#define REG_RX_PGAD_LP_PGA_LV_MASK          (0x7 << REG_RX_PGAD_LP_PGA_LV_SHIFT)
#define REG_RX_PGAD_LP_PGA_LV(n)            BITFIELD_VAL(REG_RX_PGAD_LP_PGA_LV, n)
#define REG_RX_PGAD_PRE_CHARGE              (1 << 4)
#define CFG_RX_PGAD_PRE_CHARGE_DR           (1 << 5)
#define PGAD_PRE_CHARGE_TIMER_DLY_SHIFT     6
#define PGAD_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << PGAD_PRE_CHARGE_TIMER_DLY_SHIFT)
#define PGAD_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(PGAD_PRE_CHARGE_TIMER_DLY, n)


// REG_A1
#define REG_CODEC_EN_ADCE                   (1 << 0)
#define REG_CODEC_RESET_ADCE                (1 << 1)
#define CFG_RESET_ADCE_DR                   (1 << 2)
#define REG_CODEC_IDETE_EN                  (1 << 3)
#define REG_CODEC_ADCE_CLK_SEL              (1 << 4)
#define REG_CODEC_ADCE_CH_SEL_SHIFT         5
#define REG_CODEC_ADCE_CH_SEL_MASK          (0x3 << REG_CODEC_ADCE_CH_SEL_SHIFT)
#define REG_CODEC_ADCE_CH_SEL(n)            BITFIELD_VAL(REG_CODEC_ADCE_CH_SEL, n)
#define REG_CODEC_ADCE_DITHER_BIT_EN        (1 << 7)
#define CFG_ADCE_DITHER_CLK_INV             (1 << 8)
#define REG_CODEC_ADCE_GAIN_UPDATE          (1 << 9)
#define REG_CODEC_ADCE_GAIN_BIT_SHIFT       10
#define REG_CODEC_ADCE_GAIN_BIT_MASK        (0x7 << REG_CODEC_ADCE_GAIN_BIT_SHIFT)
#define REG_CODEC_ADCE_GAIN_BIT(n)          BITFIELD_VAL(REG_CODEC_ADCE_GAIN_BIT, n)
#define REG_CODEC_ADCE_PRE_CHARGE           (1 << 13)
#define CFG_PRE_CHARGE_ADCE_DR              (1 << 14)
#define REG_RX_ADCE_ZERO_DET_EN             (1 << 15)

// REG_A2
#define REG_CODEC_ADCE_RES_2P5K_DR          (1 << 0)
#define REG_CODEC_ADCE_RES_2P5K_UPDATE      (1 << 1)
#define REG_CODEC_ADCE_RES_2P5K             (1 << 2)
#define REG_CODEC_ADCE_CAP_BIT1_SHIFT       4
#define REG_CODEC_ADCE_CAP_BIT1_MASK        (0x7F << REG_CODEC_ADCE_CAP_BIT1_SHIFT)
#define REG_CODEC_ADCE_CAP_BIT1(n)          BITFIELD_VAL(REG_CODEC_ADCE_CAP_BIT1, n)
#define REG_CODEC_ADCE_CAP_BIT2_SHIFT       11
#define REG_CODEC_ADCE_CAP_BIT2_MASK        (0x1F << REG_CODEC_ADCE_CAP_BIT2_SHIFT)
#define REG_CODEC_ADCE_CAP_BIT2(n)          BITFIELD_VAL(REG_CODEC_ADCE_CAP_BIT2, n)

// REG_A3
#define REG_CODEC_ADCE_CAP_BIT3_SHIFT       0
#define REG_CODEC_ADCE_CAP_BIT3_MASK        (0x1F << REG_CODEC_ADCE_CAP_BIT3_SHIFT)
#define REG_CODEC_ADCE_CAP_BIT3(n)          BITFIELD_VAL(REG_CODEC_ADCE_CAP_BIT3, n)
#define REG_CODEC_ADCE_OP1_IBIT_SHIFT       5
#define REG_CODEC_ADCE_OP1_IBIT_MASK        (0x3 << REG_CODEC_ADCE_OP1_IBIT_SHIFT)
#define REG_CODEC_ADCE_OP1_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCE_OP1_IBIT, n)
#define REG_CODEC_ADCE_OP2_IBIT_SHIFT       7
#define REG_CODEC_ADCE_OP2_IBIT_MASK        (0x3 << REG_CODEC_ADCE_OP2_IBIT_SHIFT)
#define REG_CODEC_ADCE_OP2_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCE_OP2_IBIT, n)
#define REG_CODEC_ADCE_OP3_IBIT_SHIFT       9
#define REG_CODEC_ADCE_OP3_IBIT_MASK        (0x3 << REG_CODEC_ADCE_OP3_IBIT_SHIFT)
#define REG_CODEC_ADCE_OP3_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCE_OP3_IBIT, n)
#define REG_CODEC_ADCE_OP4_IBIT_SHIFT       11
#define REG_CODEC_ADCE_OP4_IBIT_MASK        (0x3 << REG_CODEC_ADCE_OP4_IBIT_SHIFT)
#define REG_CODEC_ADCE_OP4_IBIT(n)          BITFIELD_VAL(REG_CODEC_ADCE_OP4_IBIT, n)
#define REG_CODEC_ADCE_REG_VSEL_SHIFT       13
#define REG_CODEC_ADCE_REG_VSEL_MASK        (0x7 << REG_CODEC_ADCE_REG_VSEL_SHIFT)
#define REG_CODEC_ADCE_REG_VSEL(n)          BITFIELD_VAL(REG_CODEC_ADCE_REG_VSEL, n)

// REG_A4
#define REG_CODEC_ADCE_IBSEL_OFFSET_SHIFT   0
#define REG_CODEC_ADCE_IBSEL_OFFSET_MASK    (0xF << REG_CODEC_ADCE_IBSEL_OFFSET_SHIFT)
#define REG_CODEC_ADCE_IBSEL_OFFSET(n)      BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_OFFSET, n)
#define REG_CODEC_ADCE_IBSEL_OP1_SHIFT      4
#define REG_CODEC_ADCE_IBSEL_OP1_MASK       (0xF << REG_CODEC_ADCE_IBSEL_OP1_SHIFT)
#define REG_CODEC_ADCE_IBSEL_OP1(n)         BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_OP1, n)
#define REG_CODEC_ADCE_IBSEL_OP2_SHIFT      8
#define REG_CODEC_ADCE_IBSEL_OP2_MASK       (0xF << REG_CODEC_ADCE_IBSEL_OP2_SHIFT)
#define REG_CODEC_ADCE_IBSEL_OP2(n)         BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_OP2, n)
#define REG_CODEC_ADCE_IBSEL_OP3_SHIFT      12
#define REG_CODEC_ADCE_IBSEL_OP3_MASK       (0xF << REG_CODEC_ADCE_IBSEL_OP3_SHIFT)
#define REG_CODEC_ADCE_IBSEL_OP3(n)         BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_OP3, n)

// REG_A5
#define REG_CODEC_ADCE_IBSEL_OP4_SHIFT      0
#define REG_CODEC_ADCE_IBSEL_OP4_MASK       (0xF << REG_CODEC_ADCE_IBSEL_OP4_SHIFT)
#define REG_CODEC_ADCE_IBSEL_OP4(n)         BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_OP4, n)
#define REG_CODEC_ADCE_IBSEL_REG_SHIFT      4
#define REG_CODEC_ADCE_IBSEL_REG_MASK       (0xF << REG_CODEC_ADCE_IBSEL_REG_SHIFT)
#define REG_CODEC_ADCE_IBSEL_REG(n)         BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_REG, n)
#define REG_CODEC_ADCE_IBSEL_VCOMP_SHIFT    8
#define REG_CODEC_ADCE_IBSEL_VCOMP_MASK     (0xF << REG_CODEC_ADCE_IBSEL_VCOMP_SHIFT)
#define REG_CODEC_ADCE_IBSEL_VCOMP(n)       BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_VCOMP, n)
#define REG_CODEC_ADCE_IBSEL_VREF_SHIFT     12
#define REG_CODEC_ADCE_IBSEL_VREF_MASK      (0xF << REG_CODEC_ADCE_IBSEL_VREF_SHIFT)
#define REG_CODEC_ADCE_IBSEL_VREF(n)        BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_VREF, n)

// REG_A6
#define REG_CODEC_ADCE_IBSEL_VREFBUF_SHIFT  0
#define REG_CODEC_ADCE_IBSEL_VREFBUF_MASK   (0xF << REG_CODEC_ADCE_IBSEL_VREFBUF_SHIFT)
#define REG_CODEC_ADCE_IBSEL_VREFBUF(n)     BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_VREFBUF, n)
#define REG_CODEC_ADCE_IBSEL_IDAC2_SHIFT    4
#define REG_CODEC_ADCE_IBSEL_IDAC2_MASK     (0xF << REG_CODEC_ADCE_IBSEL_IDAC2_SHIFT)
#define REG_CODEC_ADCE_IBSEL_IDAC2(n)       BITFIELD_VAL(REG_CODEC_ADCE_IBSEL_IDAC2, n)
#define REG_CODEC_ADCE_OFFSET_CAL_S_SHIFT   8
#define REG_CODEC_ADCE_OFFSET_CAL_S_MASK    (0x1F << REG_CODEC_ADCE_OFFSET_CAL_S_SHIFT)
#define REG_CODEC_ADCE_OFFSET_CAL_S(n)      BITFIELD_VAL(REG_CODEC_ADCE_OFFSET_CAL_S, n)
#define REG_CODEC_ADCE_OFFSET_CURRENT_EN    (1 << 13)
#define REG_CODEC_ADCE_OFFSET_CURRENT_SEL   (1 << 14)
#define REG_CODEC_ADCE_OFFSET_SW_EN         (1 << 15)

// REG_A7
#define REG_CODEC_ADCE_OFFSET_BIT_SHIFT     0
#define REG_CODEC_ADCE_OFFSET_BIT_MASK      (0x3FFF << REG_CODEC_ADCE_OFFSET_BIT_SHIFT)
#define REG_CODEC_ADCE_OFFSET_BIT(n)        BITFIELD_VAL(REG_CODEC_ADCE_OFFSET_BIT, n)
#define REG_CODEC_ADCE_DVDD_SEL             (1 << 14)
#define REG_CODEC_ADCE_PU_REG               (1 << 15)

// REG_A8
#define REG_CODEC_ADCE_VREF_SEL_SHIFT       0
#define REG_CODEC_ADCE_VREF_SEL_MASK        (0xF << REG_CODEC_ADCE_VREF_SEL_SHIFT)
#define REG_CODEC_ADCE_VREF_SEL(n)          BITFIELD_VAL(REG_CODEC_ADCE_VREF_SEL, n)
#define REG_CODEC_ADCE_VREFBUF_BIT_SHIFT    4
#define REG_CODEC_ADCE_VREFBUF_BIT_MASK     (0xF << REG_CODEC_ADCE_VREFBUF_BIT_SHIFT)
#define REG_CODEC_ADCE_VREFBUF_BIT(n)       BITFIELD_VAL(REG_CODEC_ADCE_VREFBUF_BIT, n)
#define ADCE_TIMER_RSTN_DLY_SHIFT           8
#define ADCE_TIMER_RSTN_DLY_MASK            (0x3F << ADCE_TIMER_RSTN_DLY_SHIFT)
#define ADCE_TIMER_RSTN_DLY(n)              BITFIELD_VAL(ADCE_TIMER_RSTN_DLY, n)


// REG_A9
#define ADCE_OPEN_TIMER_DLY_SHIFT           0
#define ADCE_OPEN_TIMER_DLY_MASK            (0xF << ADCE_OPEN_TIMER_DLY_SHIFT)
#define ADCE_OPEN_TIMER_DLY(n)              BITFIELD_VAL(ADCE_OPEN_TIMER_DLY, n)
#define ADCE_PRE_CHARGE_TIMER_DLY_SHIFT     4
#define ADCE_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << ADCE_PRE_CHARGE_TIMER_DLY_SHIFT)
#define ADCE_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(ADCE_PRE_CHARGE_TIMER_DLY, n)
#define REG_CODEC_ADCE_HP_MODE              (1 << 12)
#define REG_CODEC_ADCE_LP_MODE              (1 << 13)
#define REG_CODEC_ADCE_NP_MODE              (1 << 14)
#define REG_CODEC_ADCE_OP1_HP_MODE          (1 << 15)

// REG_AA
#define REG_RX_PGAE_EN                      (1 << 0)
#define REG_RX_PGAE_RESET                   (1 << 1)
#define CFG_RESET_PGAE_DR                   (1 << 2)
#define REG_RX_PGAE_2P5K_SEL                (1 << 3)
#define REG_RX_PGAE_7P5K_SEL                (1 << 4)
#define REG_RX_PGAE_10K_SEL                 (1 << 5)
#define REG_RX_PGAE_CHANSEL_SHIFT           6
#define REG_RX_PGAE_CHANSEL_MASK            (0x3 << REG_RX_PGAE_CHANSEL_SHIFT)
#define REG_RX_PGAE_CHANSEL(n)              BITFIELD_VAL(REG_RX_PGAE_CHANSEL, n)
#define REG_RX_PGAE_DACGAIN_SHIFT           8
#define REG_RX_PGAE_DACGAIN_MASK            (0x3 << REG_RX_PGAE_DACGAIN_SHIFT)
#define REG_RX_PGAE_DACGAIN(n)              BITFIELD_VAL(REG_RX_PGAE_DACGAIN, n)
#define REG_RX_PGAE_IBIT_OPA_SHIFT          10
#define REG_RX_PGAE_IBIT_OPA_MASK           (0x3 << REG_RX_PGAE_IBIT_OPA_SHIFT)
#define REG_RX_PGAE_IBIT_OPA(n)             BITFIELD_VAL(REG_RX_PGAE_IBIT_OPA, n)
#define REG_RX_PGAE_OFFSET_CAL_EN           (1 << 12)
#define REG_RX_PGAE_OP_C_SEL                (1 << 13)
#define REG_RX_PGAE_OP_GM_SEL               (1 << 14)
#define REG_RX_PGAE_OP_R_SEL                (1 << 15)

// REG_AB
#define REG_RX_PGAE_GAIN_SHIFT              0
#define REG_RX_PGAE_GAIN_MASK               (0xF << REG_RX_PGAE_GAIN_SHIFT)
#define REG_RX_PGAE_GAIN(n)                 BITFIELD_VAL(REG_RX_PGAE_GAIN, n)
#define REG_RX_PGAE_GAIN_UPDATE             (1 << 4)
#define REG_RX_PGAE_LARGEGAIN_SHIFT         5
#define REG_RX_PGAE_LARGEGAIN_MASK          (0xF << REG_RX_PGAE_LARGEGAIN_SHIFT)
#define REG_RX_PGAE_LARGEGAIN(n)            BITFIELD_VAL(REG_RX_PGAE_LARGEGAIN, n)
#define REG_RX_PGAE_LARGEGAIN_UPDATE        (1 << 9)
#define REG_RX_PGAE_DRE_SHIFT               10
#define REG_RX_PGAE_DRE_MASK                (0xF << REG_RX_PGAE_DRE_SHIFT)
#define REG_RX_PGAE_DRE(n)                  BITFIELD_VAL(REG_RX_PGAE_DRE, n)
#define REG_RX_PGAE_DRE_DR                  (1 << 14)
#define REG_RX_PGAE_DRE_UPDATE              (1 << 15)

// REG_AC
#define REG_RX_PGAE_RFB_EN                  (1 << 0)
#define REG_RX_PGAE_LP_PGA_LV_SHIFT         1
#define REG_RX_PGAE_LP_PGA_LV_MASK          (0x7 << REG_RX_PGAE_LP_PGA_LV_SHIFT)
#define REG_RX_PGAE_LP_PGA_LV(n)            BITFIELD_VAL(REG_RX_PGAE_LP_PGA_LV, n)
#define REG_RX_PGAE_PRE_CHARGE              (1 << 4)
#define CFG_RX_PGAE_PRE_CHARGE_DR           (1 << 5)
#define PGAE_PRE_CHARGE_TIMER_DLY_SHIFT     6
#define PGAE_PRE_CHARGE_TIMER_DLY_MASK      (0xFF << PGAE_PRE_CHARGE_TIMER_DLY_SHIFT)
#define PGAE_PRE_CHARGE_TIMER_DLY(n)        BITFIELD_VAL(PGAE_PRE_CHARGE_TIMER_DLY, n)


// REG_AD
#define REG_RSTN_ADCE_DLY_CNT_SHIFT         0
#define REG_RSTN_ADCE_DLY_CNT_MASK          (0xFFFF << REG_RSTN_ADCE_DLY_CNT_SHIFT)
#define REG_RSTN_ADCE_DLY_CNT(n)            BITFIELD_VAL(REG_RSTN_ADCE_DLY_CNT, n)

// REG_AE
#define RESERVED_DIG_15_0_SHIFT             0
#define RESERVED_DIG_15_0_MASK              (0xFFFF << RESERVED_DIG_15_0_SHIFT)
#define RESERVED_DIG_15_0(n)                BITFIELD_VAL(RESERVED_DIG_15_0, n)

// REG_AF
#define RESERVED_DIG_31_16_SHIFT            0
#define RESERVED_DIG_31_16_MASK             (0xFFFF << RESERVED_DIG_31_16_SHIFT)
#define RESERVED_DIG_31_16(n)               BITFIELD_VAL(RESERVED_DIG_31_16, n)



// REG_B0
#define REG_CODEC_ADC_CAP_BIT               (1 << 0)
#define REG_CODEC_ADC_DITHER0P5_EN          (1 << 1)
#define REG_CODEC_ADC_DITHER0P25_EN         (1 << 2)
#define REG_CODEC_ADC_DITHER1_EN            (1 << 3)
#define REG_CODEC_ADC_DITHER2_EN            (1 << 4)
#define REG_CODEC_ADC_DITHER_PHASE_SEL      (1 << 5)
#define REG_CODEC_ADC_OP1_R_SEL             (1 << 6)
#define REG_CODEC_ADC_OP2_R_SEL             (1 << 7)
#define REG_CODEC_ADC_OP3_R_SEL             (1 << 8)
#define REG_CODEC_ADC_OP4_R_SEL             (1 << 9)
#define REG_CODEC_ADC_RES_SEL_SHIFT         10
#define REG_CODEC_ADC_RES_SEL_MASK          (0x7 << REG_CODEC_ADC_RES_SEL_SHIFT)
#define REG_CODEC_ADC_RES_SEL(n)            BITFIELD_VAL(REG_CODEC_ADC_RES_SEL, n)
#define REG_CODEC_EN_BIAS                   (1 << 13)
#define REG_CODEC_EN_BIAS_LP                (1 << 14)
#define REG_CODEC_EN_RX_EXT                 (1 << 15)

// REG_B1
#define REG_CODEC_BIAS_IBSEL_SHIFT          0
#define REG_CODEC_BIAS_IBSEL_MASK           (0xF << REG_CODEC_BIAS_IBSEL_SHIFT)
#define REG_CODEC_BIAS_IBSEL(n)             BITFIELD_VAL(REG_CODEC_BIAS_IBSEL, n)
#define REG_CODEC_BIAS_IBSEL_TX_SHIFT       4
#define REG_CODEC_BIAS_IBSEL_TX_MASK        (0xF << REG_CODEC_BIAS_IBSEL_TX_SHIFT)
#define REG_CODEC_BIAS_IBSEL_TX(n)          BITFIELD_VAL(REG_CODEC_BIAS_IBSEL_TX, n)
#define REG_CODEC_BIAS_IBSEL_VOICE_SHIFT    8
#define REG_CODEC_BIAS_IBSEL_VOICE_MASK     (0xF << REG_CODEC_BIAS_IBSEL_VOICE_SHIFT)
#define REG_CODEC_BIAS_IBSEL_VOICE(n)       BITFIELD_VAL(REG_CODEC_BIAS_IBSEL_VOICE, n)
#define CFG_ADC_START                       (1 << 12)
#define CFG_REG_CLKMUX_DVDD_SEL             (1 << 13)


// REG_B2
#define REG_CODEC_EN_VCM                    (1 << 0)
#define REG_CODEC_EN_VCM_BUFFER             (1 << 1)
#define REG_CODEC_LP_VCM                    (1 << 2)
#define RESERVED_DIG_32                     (1 << 3)
#define REG_CODEC_VCM_LOW_VCM_SHIFT         4
#define REG_CODEC_VCM_LOW_VCM_MASK          (0xF << REG_CODEC_VCM_LOW_VCM_SHIFT)
#define REG_CODEC_VCM_LOW_VCM(n)            BITFIELD_VAL(REG_CODEC_VCM_LOW_VCM, n)
#define REG_CODEC_VCM_LOW_VCM_LP_SHIFT      8
#define REG_CODEC_VCM_LOW_VCM_LP_MASK       (0xF << REG_CODEC_VCM_LOW_VCM_LP_SHIFT)
#define REG_CODEC_VCM_LOW_VCM_LP(n)         BITFIELD_VAL(REG_CODEC_VCM_LOW_VCM_LP, n)
#define REG_CODEC_VCM_LOW_VCM_LPF_SHIFT     12
#define REG_CODEC_VCM_LOW_VCM_LPF_MASK      (0xF << REG_CODEC_VCM_LOW_VCM_LPF_SHIFT)
#define REG_CODEC_VCM_LOW_VCM_LPF(n)        BITFIELD_VAL(REG_CODEC_VCM_LOW_VCM_LPF, n)

// REG_B3
#define REG_CODEC_VCM_EN_LPF                (1 << 0)
#define REG_CODEC_BIAS_LOWV                 (1 << 1)
#define REG_CODEC_BIAS_LOWV_LP              (1 << 2)
#define REG_CODEC_BUF_LOWPOWER              (1 << 3)
#define REG_CODEC_BUF_LOWPOWER2             (1 << 4)
#define REG_CODEC_BUF_LOWVCM_SHIFT          5
#define REG_CODEC_BUF_LOWVCM_MASK           (0x7 << REG_CODEC_BUF_LOWVCM_SHIFT)
#define REG_CODEC_BUF_LOWVCM(n)             BITFIELD_VAL(REG_CODEC_BUF_LOWVCM, n)




// REG_B4
#define REG_VOICE_CLK_EDGE_SEL              (1 << 0)
#define REG_VOICE_EN_AGPIO_TEST             (1 << 1)
#define REG_VOICE_EN_REF_TEST               (1 << 2)
#define REG_VOICE_GAIN_A_SHIFT              3
#define REG_VOICE_GAIN_A_MASK               (0x7 << REG_VOICE_GAIN_A_SHIFT)
#define REG_VOICE_GAIN_A(n)                 BITFIELD_VAL(REG_VOICE_GAIN_A, n)
#define REG_VOICE_GAIN_B_SHIFT              6
#define REG_VOICE_GAIN_B_MASK               (0x7 << REG_VOICE_GAIN_B_SHIFT)
#define REG_VOICE_GAIN_B(n)                 BITFIELD_VAL(REG_VOICE_GAIN_B, n)
#define REG_VOICE_GAIN_BASE_SHIFT           9
#define REG_VOICE_GAIN_BASE_MASK            (0x7 << REG_VOICE_GAIN_BASE_SHIFT)
#define REG_VOICE_GAIN_BASE(n)              BITFIELD_VAL(REG_VOICE_GAIN_BASE, n)
#define REG_VOICE_PRECH                     (1 << 12)
#define REG_VOICE_PU                        (1 << 13)
#define REG_VOICE_PU_LDO                    (1 << 14)
#define REG_VOICE_PU_OSC                    (1 << 15)

// REG_B5
#define REG_VOICE_HIGH_TUNE_A_SHIFT         0
#define REG_VOICE_HIGH_TUNE_A_MASK          (0xF << REG_VOICE_HIGH_TUNE_A_SHIFT)
#define REG_VOICE_HIGH_TUNE_A(n)            BITFIELD_VAL(REG_VOICE_HIGH_TUNE_A, n)
#define REG_VOICE_HIGH_TUNE_B_SHIFT         4
#define REG_VOICE_HIGH_TUNE_B_MASK          (0xF << REG_VOICE_HIGH_TUNE_B_SHIFT)
#define REG_VOICE_HIGH_TUNE_B(n)            BITFIELD_VAL(REG_VOICE_HIGH_TUNE_B, n)
#define REG_VOICE_LOW_TUNE_SHIFT            8
#define REG_VOICE_LOW_TUNE_MASK             (0x3 << REG_VOICE_LOW_TUNE_SHIFT)
#define REG_VOICE_LOW_TUNE(n)               BITFIELD_VAL(REG_VOICE_LOW_TUNE, n)
#define REG_VOICE_LDO_VBIT_SHIFT            10
#define REG_VOICE_LDO_VBIT_MASK             (0x7 << REG_VOICE_LDO_VBIT_SHIFT)
#define REG_VOICE_LDO_VBIT(n)               BITFIELD_VAL(REG_VOICE_LDO_VBIT, n)
#define REG_CODEC_VOICE_OSC_VOUT_SEL_SHIFT  13
#define REG_CODEC_VOICE_OSC_VOUT_SEL_MASK   (0x7 << REG_CODEC_VOICE_OSC_VOUT_SEL_SHIFT)
#define REG_CODEC_VOICE_OSC_VOUT_SEL(n)     BITFIELD_VAL(REG_CODEC_VOICE_OSC_VOUT_SEL, n)

// REG_B6
#define REG_VOICE_OSC_FR_SHIFT              0
#define REG_VOICE_OSC_FR_MASK               (0x7 << REG_VOICE_OSC_FR_SHIFT)
#define REG_VOICE_OSC_FR(n)                 BITFIELD_VAL(REG_VOICE_OSC_FR, n)
#define REG_VOICE_OSC_PWR_SHIFT             3
#define REG_VOICE_OSC_PWR_MASK              (0x3 << REG_VOICE_OSC_PWR_SHIFT)
#define REG_VOICE_OSC_PWR(n)                BITFIELD_VAL(REG_VOICE_OSC_PWR, n)
#define CFG_VOICE2ADCE                      (1 << 5)
#define CFG_VOICE_POWER_ON                  (1 << 6)
#define CFG_VOICE_TRIG_ENABLE               (1 << 7)
#define CFG_VOICE_RESET                     (1 << 8)
#define CFG_VOICE_DR                        (1 << 9)
#define CFG_VOICE_PU_DELAY_SHIFT            10
#define CFG_VOICE_PU_DELAY_MASK             (0x7 << CFG_VOICE_PU_DELAY_SHIFT)
#define CFG_VOICE_PU_DELAY(n)               BITFIELD_VAL(CFG_VOICE_PU_DELAY, n)
#define ADC_SEL_VAD_DIG_SHIFT               13
#define ADC_SEL_VAD_DIG_MASK                (0x7 << ADC_SEL_VAD_DIG_SHIFT)
#define ADC_SEL_VAD_DIG(n)                  BITFIELD_VAL(ADC_SEL_VAD_DIG, n)

// REG_B7
#define REG_VOICE_LP_AMPA_SHIFT             0
#define REG_VOICE_LP_AMPA_MASK              (0x7 << REG_VOICE_LP_AMPA_SHIFT)
#define REG_VOICE_LP_AMPA(n)                BITFIELD_VAL(REG_VOICE_LP_AMPA, n)
#define REG_VOICE_LP_AMPB_SHIFT             3
#define REG_VOICE_LP_AMPB_MASK              (0x7 << REG_VOICE_LP_AMPB_SHIFT)
#define REG_VOICE_LP_AMPB(n)                BITFIELD_VAL(REG_VOICE_LP_AMPB, n)
#define REG_VOICE_LP_COMP_SHIFT             6
#define REG_VOICE_LP_COMP_MASK              (0x7 << REG_VOICE_LP_COMP_SHIFT)
#define REG_VOICE_LP_COMP(n)                BITFIELD_VAL(REG_VOICE_LP_COMP, n)
#define REG_VOICE_LP_LDO_SHIFT              9
#define REG_VOICE_LP_LDO_MASK               (0x7 << REG_VOICE_LP_LDO_SHIFT)
#define REG_VOICE_LP_LDO(n)                 BITFIELD_VAL(REG_VOICE_LP_LDO, n)
#define REG_VOICE_LP_VREF_SHIFT             12
#define REG_VOICE_LP_VREF_MASK              (0x7 << REG_VOICE_LP_VREF_SHIFT)
#define REG_VOICE_LP_VREF(n)                BITFIELD_VAL(REG_VOICE_LP_VREF, n)
#define CFG_REG_VOICE_TRIG_ADCE_EN          (1 << 15)

// REG_B8
#define REG_VOICE_SEL_VCM0P3_BIN_SHIFT      0
#define REG_VOICE_SEL_VCM0P3_BIN_MASK       (0x7 << REG_VOICE_SEL_VCM0P3_BIN_SHIFT)
#define REG_VOICE_SEL_VCM0P3_BIN(n)         BITFIELD_VAL(REG_VOICE_SEL_VCM0P3_BIN, n)
#define REG_VOICE_SEL_VCM_BIN_SHIFT         3
#define REG_VOICE_SEL_VCM_BIN_MASK          (0xF << REG_VOICE_SEL_VCM_BIN_SHIFT)
#define REG_VOICE_SEL_VCM_BIN(n)            BITFIELD_VAL(REG_VOICE_SEL_VCM_BIN, n)
#define REG_VOICE_SEL_VCMIN_BIN_SHIFT       7
#define REG_VOICE_SEL_VCMIN_BIN_MASK        (0xF << REG_VOICE_SEL_VCMIN_BIN_SHIFT)
#define REG_VOICE_SEL_VCMIN_BIN(n)          BITFIELD_VAL(REG_VOICE_SEL_VCMIN_BIN, n)
#define REG_VOICE_SEL_VREF_BIN_SHIFT        11
#define REG_VOICE_SEL_VREF_BIN_MASK         (0xF << REG_VOICE_SEL_VREF_BIN_SHIFT)
#define REG_VOICE_SEL_VREF_BIN(n)           BITFIELD_VAL(REG_VOICE_SEL_VREF_BIN, n)
#define CFG_VOICE2OSC                       (1 << 15)

// REG_B9
#define CFG_VOICE_PRECH_DELAY_SHIFT         0
#define CFG_VOICE_PRECH_DELAY_MASK          (0xFF << CFG_VOICE_PRECH_DELAY_SHIFT)
#define CFG_VOICE_PRECH_DELAY(n)            BITFIELD_VAL(CFG_VOICE_PRECH_DELAY, n)
#define CFG_VOICE_DET_DELAY_SHIFT           8
#define CFG_VOICE_DET_DELAY_MASK            (0xFF << CFG_VOICE_DET_DELAY_SHIFT)
#define CFG_VOICE_DET_DELAY(n)              BITFIELD_VAL(CFG_VOICE_DET_DELAY, n)

// REG_BA
#define CFG_VOICE_PRECH_DONE_DELAY_SHIFT    0
#define CFG_VOICE_PRECH_DONE_DELAY_MASK     (0x1F << CFG_VOICE_PRECH_DONE_DELAY_SHIFT)
#define CFG_VOICE_PRECH_DONE_DELAY(n)       BITFIELD_VAL(CFG_VOICE_PRECH_DONE_DELAY, n)
#define BT_PU_OSC_DELAY_SHIFT               5
#define BT_PU_OSC_DELAY_MASK                (0xFF << BT_PU_OSC_DELAY_SHIFT)
#define BT_PU_OSC_DELAY(n)                  BITFIELD_VAL(BT_PU_OSC_DELAY, n)
#define VOICE_OUT_MASK_MODE                 (1 << 13)
#define VOICE_OUT_MASK_EN                   (1 << 14)


// REG_BB
#define REG_CODEC_VOICE_CALIB_START         (1 << 0)
#define REG_CODEC_VOICE_EN_OFFSET_CALIB_A   (1 << 1)
#define REG_CODEC_VOICE_OFFSET_CALIB_MODE_A (1 << 2)
#define REG_CODEC_VOICE_EN_CALIB_A_DR       (1 << 3)
#define REG_CODEC_VOICE_CLR_MODE_A_DONE     (1 << 4)
#define REG_CODEC_VOICE_CALIB_A_CNT_SHIFT   5
#define REG_CODEC_VOICE_CALIB_A_CNT_MASK    (0x3FF << REG_CODEC_VOICE_CALIB_A_CNT_SHIFT)
#define REG_CODEC_VOICE_CALIB_A_CNT(n)      BITFIELD_VAL(REG_CODEC_VOICE_CALIB_A_CNT, n)
#define CFG_BT_TRIG_PU_OSC                  (1 << 15)

// REG_BC
#define REG_CODEC_VOICE_EN_OFFSET_CALIB_B   (1 << 0)
#define REG_CODEC_VOICE_OFFSET_CALIB_MODE_B (1 << 1)
#define REG_CODEC_VOICE_EN_CALIB_B_DR       (1 << 2)
#define REG_CODEC_VOICE_CLR_MODE_B_DONE     (1 << 3)
#define REG_CODEC_VOICE_CALIB_B_CNT_SHIFT   4
#define REG_CODEC_VOICE_CALIB_B_CNT_MASK    (0x3FF << REG_CODEC_VOICE_CALIB_B_CNT_SHIFT)
#define REG_CODEC_VOICE_CALIB_B_CNT(n)      BITFIELD_VAL(REG_CODEC_VOICE_CALIB_B_CNT, n)


// REG_BD
#define REG_CODEC_VOICE_OFFSET_BIT_A_SHIFT  0
#define REG_CODEC_VOICE_OFFSET_BIT_A_MASK   (0x3F << REG_CODEC_VOICE_OFFSET_BIT_A_SHIFT)
#define REG_CODEC_VOICE_OFFSET_BIT_A(n)     BITFIELD_VAL(REG_CODEC_VOICE_OFFSET_BIT_A, n)
#define REG_CODEC_VOICE_CALIB_A_DONE        (1 << 6)
#define REG_CODEC_VOICE_OFFSET_BIT_B_SHIFT  7
#define REG_CODEC_VOICE_OFFSET_BIT_B_MASK   (0x3F << REG_CODEC_VOICE_OFFSET_BIT_B_SHIFT)
#define REG_CODEC_VOICE_OFFSET_BIT_B(n)     BITFIELD_VAL(REG_CODEC_VOICE_OFFSET_BIT_B, n)
#define REG_CODEC_VOICE_CALIB_B_DONE        (1 << 13)
#define CODEC_PU_CLASSD_L_STATUS            (1 << 14)



// REG_160
#define REVID_SHIFT                         0
#define REVID_MASK                          (0xF << REVID_SHIFT)
#define REVID(n)                            BITFIELD_VAL(REVID, n)

// REG_161
#define REG_CODEC_CLASSD_BIAS_EN            (1 << 0)
#define REG_CODEC_CLASSD_BIAS_IBSEL_SHIFT   1
#define REG_CODEC_CLASSD_BIAS_IBSEL_MASK    (0x3 << REG_CODEC_CLASSD_BIAS_IBSEL_SHIFT)
#define REG_CODEC_CLASSD_BIAS_IBSEL(n)      BITFIELD_VAL(REG_CODEC_CLASSD_BIAS_IBSEL, n)
#define REG_CODEC_CLASSD_CBIT_SHIFT         3
#define REG_CODEC_CLASSD_CBIT_MASK          (0x1F << REG_CODEC_CLASSD_CBIT_SHIFT)
#define REG_CODEC_CLASSD_CBIT(n)            BITFIELD_VAL(REG_CODEC_CLASSD_CBIT, n)
#define REG_CODEC_CLASSD_CHOPPER_CLK_RESETN (1 << 8)
#define REG_CODEC_CLASSD_CHOPPER_CMFB_BIT_SHIFT 9
#define REG_CODEC_CLASSD_CHOPPER_CMFB_BIT_MASK (0x1F << REG_CODEC_CLASSD_CHOPPER_CMFB_BIT_SHIFT)
#define REG_CODEC_CLASSD_CHOPPER_CMFB_BIT(n) BITFIELD_VAL(REG_CODEC_CLASSD_CHOPPER_CMFB_BIT, n)
#define REG_CODEC_CLASSD_RST_PWMCMFB_HV     (1 << 14)
#define REG_CODEC_PU_CLASSD_PWMCMFB_HV      (1 << 15)

// REG_162
#define REG_CODEC_CLASSD_DRV_MODE0_N_BIT_SHIFT 0
#define REG_CODEC_CLASSD_DRV_MODE0_N_BIT_MASK (0xFF << REG_CODEC_CLASSD_DRV_MODE0_N_BIT_SHIFT)
#define REG_CODEC_CLASSD_DRV_MODE0_N_BIT(n) BITFIELD_VAL(REG_CODEC_CLASSD_DRV_MODE0_N_BIT, n)
#define REG_CODEC_CLASSD_DRV_MODE0_P_BIT_SHIFT 8
#define REG_CODEC_CLASSD_DRV_MODE0_P_BIT_MASK (0xFF << REG_CODEC_CLASSD_DRV_MODE0_P_BIT_SHIFT)
#define REG_CODEC_CLASSD_DRV_MODE0_P_BIT(n) BITFIELD_VAL(REG_CODEC_CLASSD_DRV_MODE0_P_BIT, n)

// REG_163
#define REG_CODEC_CLASSD_DRV_MODE1_BIT_SHIFT 0
#define REG_CODEC_CLASSD_DRV_MODE1_BIT_MASK (0xF << REG_CODEC_CLASSD_DRV_MODE1_BIT_SHIFT)
#define REG_CODEC_CLASSD_DRV_MODE1_BIT(n)   BITFIELD_VAL(REG_CODEC_CLASSD_DRV_MODE1_BIT, n)
#define REG_CODEC_CLASSD_DRV_MODE           (1 << 4)
#define REG_CODEC_CLASSD_CHOPPER_OUT2ADC_BIT_SHIFT 5
#define REG_CODEC_CLASSD_CHOPPER_OUT2ADC_BIT_MASK (0x1F << REG_CODEC_CLASSD_CHOPPER_OUT2ADC_BIT_SHIFT)
#define REG_CODEC_CLASSD_CHOPPER_OUT2ADC_BIT(n) BITFIELD_VAL(REG_CODEC_CLASSD_CHOPPER_OUT2ADC_BIT, n)
#define REG_CODEC_CLASSD_DAC_CLK_EDGE_SEL   (1 << 10)
#define REG_CODEC_CLASSD_DAC_SWR_SHIFT      11
#define REG_CODEC_CLASSD_DAC_SWR_MASK       (0x3 << REG_CODEC_CLASSD_DAC_SWR_SHIFT)
#define REG_CODEC_CLASSD_DAC_SWR(n)         BITFIELD_VAL(REG_CODEC_CLASSD_DAC_SWR, n)
#define REG_CODEC_CLASSD_OCP_DEBOUNCE_TIME_SHIFT 13
#define REG_CODEC_CLASSD_OCP_DEBOUNCE_TIME_MASK (0x7 << REG_CODEC_CLASSD_OCP_DEBOUNCE_TIME_SHIFT)
#define REG_CODEC_CLASSD_OCP_DEBOUNCE_TIME(n) BITFIELD_VAL(REG_CODEC_CLASSD_OCP_DEBOUNCE_TIME, n)

// REG_164
#define REG_CODEC_CLASSD_OFFSET_L_BIT_SHIFT 0
#define REG_CODEC_CLASSD_OFFSET_L_BIT_MASK  (0x3FFF << REG_CODEC_CLASSD_OFFSET_L_BIT_SHIFT)
#define REG_CODEC_CLASSD_OFFSET_L_BIT(n)    BITFIELD_VAL(REG_CODEC_CLASSD_OFFSET_L_BIT, n)
#define REG_CODEC_CLASSD_OFFSET_MODE        (1 << 14)
#define REG_CODEC_CLASSD_OCP_DET_RSTN       (1 << 15)


// REG_165
#define REG_CODEC_CLASSD_OCP_CURRENT_BIT_SHIFT 14
#define REG_CODEC_CLASSD_OCP_CURRENT_BIT_MASK (0x3 << REG_CODEC_CLASSD_OCP_CURRENT_BIT_SHIFT)
#define REG_CODEC_CLASSD_OCP_CURRENT_BIT(n) BITFIELD_VAL(REG_CODEC_CLASSD_OCP_CURRENT_BIT, n)

// REG_166
#define REG_CODEC_CLASSD_OFFSETCAL_OUTN2VIN_L (1 << 0)

#define REG_CODEC_CLASSD_OFFSETCAL_OUTN2VIP_L (1 << 2)

#define REG_CODEC_CLASSD_OFFSETCAL_OUTP2VIN_L (1 << 4)

#define REG_CODEC_CLASSD_OFFSETCAL_OUTP2VIP_L (1 << 6)

#define REG_CODEC_CLASSD_S4_L               (1 << 8)

#define REG_CODEC_CLASSD_OP1_R_SEL          (1 << 10)

#define REG_CODEC_CLASSD_OP2_R_SEL          (1 << 13)
#define REG_CODEC_CLASSD_DEADTIME_BIT       (1 << 14)
#define REG_CODEC_CLASSD_LPBUF_BIAS_EN      (1 << 15)

// REG_167
#define REG_CODEC_CLASSD_S1_L               (1 << 0)
#define REG_CODEC_CLASSD_S2_L               (1 << 1)
#define REG_CODEC_CLASSD_S3_L               (1 << 2)



#define REG_CODEC_CLASSD_SS_GAIN_BIT_L_SHIFT 6
#define REG_CODEC_CLASSD_SS_GAIN_BIT_L_MASK (0xF << REG_CODEC_CLASSD_SS_GAIN_BIT_L_SHIFT)
#define REG_CODEC_CLASSD_SS_GAIN_BIT_L(n)   BITFIELD_VAL(REG_CODEC_CLASSD_SS_GAIN_BIT_L, n)



// REG_168
#define REG_CODEC_CLASSD_TRIGEN_AMP_SHIFT   0
#define REG_CODEC_CLASSD_TRIGEN_AMP_MASK    (0x1F << REG_CODEC_CLASSD_TRIGEN_AMP_SHIFT)
#define REG_CODEC_CLASSD_TRIGEN_AMP(n)      BITFIELD_VAL(REG_CODEC_CLASSD_TRIGEN_AMP, n)
#define REG_CODEC_CLASSD_TRIGEN_CBIT_SHIFT  5
#define REG_CODEC_CLASSD_TRIGEN_CBIT_MASK   (0x3F << REG_CODEC_CLASSD_TRIGEN_CBIT_SHIFT)
#define REG_CODEC_CLASSD_TRIGEN_CBIT(n)     BITFIELD_VAL(REG_CODEC_CLASSD_TRIGEN_CBIT, n)
#define REG_CODEC_CLASSD_TRIGEN_EN          (1 << 11)
#define REG_CODEC_CLASSD_TRIGEN_INJ_SHIFT   12
#define REG_CODEC_CLASSD_TRIGEN_INJ_MASK    (0xF << REG_CODEC_CLASSD_TRIGEN_INJ_SHIFT)
#define REG_CODEC_CLASSD_TRIGEN_INJ(n)      BITFIELD_VAL(REG_CODEC_CLASSD_TRIGEN_INJ, n)

// REG_169
#define REG_CODEC_CLASSD_TRIGEN_OUTCLK_EN   (1 << 0)
#define REG_CODEC_CLASSD_TRIGEN_RSTN        (1 << 1)
#define REG_CODEC_CLASSD_TRIGEN_SS_AZ_DLY_SHIFT 2
#define REG_CODEC_CLASSD_TRIGEN_SS_AZ_DLY_MASK (0xF << REG_CODEC_CLASSD_TRIGEN_SS_AZ_DLY_SHIFT)
#define REG_CODEC_CLASSD_TRIGEN_SS_AZ_DLY(n) BITFIELD_VAL(REG_CODEC_CLASSD_TRIGEN_SS_AZ_DLY, n)
#define REG_CODEC_CLASSD_TRIGEN_SS_EN       (1 << 6)
#define REG_CODEC_CLASSD_TRIGEN_SS_HALF     (1 << 7)
#define REG_CODEC_CLASSD_TRIGEN_SS_RANGE_SHIFT 8
#define REG_CODEC_CLASSD_TRIGEN_SS_RANGE_MASK (0x3 << REG_CODEC_CLASSD_TRIGEN_SS_RANGE_SHIFT)
#define REG_CODEC_CLASSD_TRIGEN_SS_RANGE(n) BITFIELD_VAL(REG_CODEC_CLASSD_TRIGEN_SS_RANGE, n)
#define REG_CODEC_CLASSD_TRIGEN_SS_RSTN     (1 << 10)
#define REG_CODEC_CLASSD_PU_CHOPPER_CMFB    (1 << 11)
#define REG_CODEC_CLASSD_PU_CHOPPER_OUT2ADC (1 << 12)
#define REG_CODEC_CLASSD_PU_CLK_CHOPPER     (1 << 13)
#define REG_CODEC_PU_CLASSD_VREF_L          (1 << 14)


// REG_16A
#define REG_CODEC_CLASSD_VREF_L_BIT_SHIFT   0
#define REG_CODEC_CLASSD_VREF_L_BIT_MASK    (0xF << REG_CODEC_CLASSD_VREF_L_BIT_SHIFT)
#define REG_CODEC_CLASSD_VREF_L_BIT(n)      BITFIELD_VAL(REG_CODEC_CLASSD_VREF_L_BIT, n)

#define REG_CODEC_CLASSD_VREFBUF_CAS_L_SHIFT 8
#define REG_CODEC_CLASSD_VREFBUF_CAS_L_MASK (0x3 << REG_CODEC_CLASSD_VREFBUF_CAS_L_SHIFT)
#define REG_CODEC_CLASSD_VREFBUF_CAS_L(n)   BITFIELD_VAL(REG_CODEC_CLASSD_VREFBUF_CAS_L, n)

#define REG_CODEC_PU_CLASSD_OFFSET_L        (1 << 12)

#define REG_CODEC_PU_CLASSD_OFFSETCAL_L     (1 << 14)


// REG_16B
#define REG_CODEC_CLASSD_VREFBUF_COM_R      (1 << 0)
#define REG_CODEC_CLASSD_VREFBUF_ISEL_SHIFT 1
#define REG_CODEC_CLASSD_VREFBUF_ISEL_MASK  (0x7 << REG_CODEC_CLASSD_VREFBUF_ISEL_SHIFT)
#define REG_CODEC_CLASSD_VREFBUF_ISEL(n)    BITFIELD_VAL(REG_CODEC_CLASSD_VREFBUF_ISEL, n)
#define REG_CODEC_CLASSD_VREFBUF_LOAD_SHIFT 4
#define REG_CODEC_CLASSD_VREFBUF_LOAD_MASK  (0x7 << REG_CODEC_CLASSD_VREFBUF_LOAD_SHIFT)
#define REG_CODEC_CLASSD_VREFBUF_LOAD(n)    BITFIELD_VAL(REG_CODEC_CLASSD_VREFBUF_LOAD, n)
#define REG_CODEC_PU_CLASSD_DAC_CLK_L       (1 << 7)
#define REG_CODEC_PU_CLASSD_DAC_CLK_R       (1 << 8)
#define REG_CODEC_PU_CLASSD_DAC_DVDD0P9     (1 << 9)
#define REG_CODEC_PU_CLASSD_L               (1 << 10)

#define REG_CODEC_PU_CLASSD_OCP_L           (1 << 12)

#define REG_CODEC_PU_CLASSD_OCPS2S3_L       (1 << 14)




// REG_16C
#define CFG_TX_PEAK_OFF_ADC_EN              (1 << 0)
#define CFG_TX_PEAK_OFF_DAC_EN              (1 << 1)
#define CFG_PEAK_DET_DR                     (1 << 2)
#define CFG_TX_PEAK_OFF_ADC                 (1 << 3)
#define CFG_TX_PEAK_OFF_DAC                 (1 << 4)
#define CFG_PEAK_DET_DB_DELAY_SHIFT         5
#define CFG_PEAK_DET_DB_DELAY_MASK          (0x7 << CFG_PEAK_DET_DB_DELAY_SHIFT)
#define CFG_PEAK_DET_DB_DELAY(n)            BITFIELD_VAL(CFG_PEAK_DET_DB_DELAY, n)



// REG_16D
#define REG_CODEC_TX_PEAK_NL_EN             (1 << 0)

#define REG_CODEC_TX_PEAK_PL_EN             (1 << 2)

#define REG_CODEC_TX_PEAK_DET_BIT           (1 << 4)
#define REG_PU_CLKMUX_LDO0P9                (1 << 5)
#define REG_PU_OSC                          (1 << 6)
#define REG_CLKMUX_DVDD_SEL                 (1 << 7)
#define REG_CRYSTAL_SEL_LV                  (1 << 8)
#define REG_IDETLEAR_EN                     (1 << 9)

#define REG_EXTPLL_SEL                      (1 << 11)
#define REG_TX_REGULATOR_BIT_SHIFT          12
#define REG_TX_REGULATOR_BIT_MASK           (0xF << REG_TX_REGULATOR_BIT_SHIFT)
#define REG_TX_REGULATOR_BIT(n)             BITFIELD_VAL(REG_TX_REGULATOR_BIT, n)

// REG_16E
#define REG_CODEC_TX_EAR_DR_EN              (1 << 0)
#define REG_CODEC_TX_EAR_DRE_GAIN_L_UPDATE  (1 << 1)

#define REG_CODEC_TX_EAR_DRE_GAIN_L_SHIFT   3
#define REG_CODEC_TX_EAR_DRE_GAIN_L_MASK    (0x1F << REG_CODEC_TX_EAR_DRE_GAIN_L_SHIFT)
#define REG_CODEC_TX_EAR_DRE_GAIN_L(n)      BITFIELD_VAL(REG_CODEC_TX_EAR_DRE_GAIN_L, n)

#define REG_CODEC_TX_EAR_ENBIAS             (1 << 13)
#define REG_CODEC_TX_EAR_LPBIAS             (1 << 14)
#define REG_CODEC_TX_EAR_OCEN               (1 << 15)

// REG_16F
#define REG_CODEC_TEST_SEL_SHIFT            0
#define REG_CODEC_TEST_SEL_MASK             (0xF << REG_CODEC_TEST_SEL_SHIFT)
#define REG_CODEC_TEST_SEL(n)               BITFIELD_VAL(REG_CODEC_TEST_SEL, n)
#define REG_CODEC_TX_DAC_MUTEL              (1 << 4)

#define REG_CODEC_TX_DAC_SWR_SHIFT          6
#define REG_CODEC_TX_DAC_SWR_MASK           (0x3 << REG_CODEC_TX_DAC_SWR_SHIFT)
#define REG_CODEC_TX_DAC_SWR(n)             BITFIELD_VAL(REG_CODEC_TX_DAC_SWR, n)
#define REG_CODEC_TX_DAC_VREF_L_SHIFT       8
#define REG_CODEC_TX_DAC_VREF_L_MASK        (0xF << REG_CODEC_TX_DAC_VREF_L_SHIFT)
#define REG_CODEC_TX_DAC_VREF_L(n)          BITFIELD_VAL(REG_CODEC_TX_DAC_VREF_L, n)
#define REG_CODEC_TX_DAC_VREF_R_SHIFT       12
#define REG_CODEC_TX_DAC_VREF_R_MASK        (0xF << REG_CODEC_TX_DAC_VREF_R_SHIFT)
#define REG_CODEC_TX_DAC_VREF_R(n)          BITFIELD_VAL(REG_CODEC_TX_DAC_VREF_R, n)

// REG_170
#define REG_CODEC_TX_EAR_COMP1_SHIFT        0
#define REG_CODEC_TX_EAR_COMP1_MASK         (0xFF << REG_CODEC_TX_EAR_COMP1_SHIFT)
#define REG_CODEC_TX_EAR_COMP1(n)           BITFIELD_VAL(REG_CODEC_TX_EAR_COMP1, n)
#define REG_CODEC_TX_EAR_COMP2_SHIFT        8
#define REG_CODEC_TX_EAR_COMP2_MASK         (0xFF << REG_CODEC_TX_EAR_COMP2_SHIFT)
#define REG_CODEC_TX_EAR_COMP2(n)           BITFIELD_VAL(REG_CODEC_TX_EAR_COMP2, n)

// REG_171
#define REG_CODEC_TX_EAR_LOWGAINL_SHIFT     0
#define REG_CODEC_TX_EAR_LOWGAINL_MASK      (0x3F << REG_CODEC_TX_EAR_LOWGAINL_SHIFT)
#define REG_CODEC_TX_EAR_LOWGAINL(n)        BITFIELD_VAL(REG_CODEC_TX_EAR_LOWGAINL, n)

#define REG_CODEC_TX_EAR_IBSEL_SHIFT        12
#define REG_CODEC_TX_EAR_IBSEL_MASK         (0x3 << REG_CODEC_TX_EAR_IBSEL_SHIFT)
#define REG_CODEC_TX_EAR_IBSEL(n)           BITFIELD_VAL(REG_CODEC_TX_EAR_IBSEL, n)
#define REG_CODEC_TX_EAR_LCAL               (1 << 14)


// REG_172
#define REG_CODEC_TX_EAR_OFF_BITL_SHIFT     0
#define REG_CODEC_TX_EAR_OFF_BITL_MASK      (0x3FFF << REG_CODEC_TX_EAR_OFF_BITL_SHIFT)
#define REG_CODEC_TX_EAR_OFF_BITL(n)        BITFIELD_VAL(REG_CODEC_TX_EAR_OFF_BITL, n)
#define REG_CODEC_TX_EAR_OFFEN              (1 << 14)
#define REG_CODEC_TX_EN_DACLDO              (1 << 15)


// REG_173
#define REG_CODEC_TX_EAR_DIS_SHIFT          14
#define REG_CODEC_TX_EAR_DIS_MASK           (0x3 << REG_CODEC_TX_EAR_DIS_SHIFT)
#define REG_CODEC_TX_EAR_DIS(n)             BITFIELD_VAL(REG_CODEC_TX_EAR_DIS, n)

// REG_174
#define REG_CODEC_TX_EAR_SOFTSTART_SHIFT    0
#define REG_CODEC_TX_EAR_SOFTSTART_MASK     (0x3F << REG_CODEC_TX_EAR_SOFTSTART_SHIFT)
#define REG_CODEC_TX_EAR_SOFTSTART(n)       BITFIELD_VAL(REG_CODEC_TX_EAR_SOFTSTART, n)
#define REG_CODEC_TX_EAR_OUTPUTSEL_SHIFT    6
#define REG_CODEC_TX_EAR_OUTPUTSEL_MASK     (0x1F << REG_CODEC_TX_EAR_OUTPUTSEL_SHIFT)
#define REG_CODEC_TX_EAR_OUTPUTSEL(n)       BITFIELD_VAL(REG_CODEC_TX_EAR_OUTPUTSEL, n)
#define REG_CODEC_TX_EAR_DR_ST_SHIFT        11
#define REG_CODEC_TX_EAR_DR_ST_MASK         (0x7 << REG_CODEC_TX_EAR_DR_ST_SHIFT)
#define REG_CODEC_TX_EAR_DR_ST(n)           BITFIELD_VAL(REG_CODEC_TX_EAR_DR_ST, n)
#define REG_CODEC_TX_EAR_FB_SW_SHIFT        14
#define REG_CODEC_TX_EAR_FB_SW_MASK         (0x3 << REG_CODEC_TX_EAR_FB_SW_SHIFT)
#define REG_CODEC_TX_EAR_FB_SW(n)           BITFIELD_VAL(REG_CODEC_TX_EAR_FB_SW, n)

// REG_175
#define REG_CODEC_TX_EN_EARPA_L             (1 << 0)

#define REG_CODEC_TX_EN_LCLK                (1 << 2)
#define REG_CODEC_TX_EN_LDAC                (1 << 3)


#define REG_CODEC_TX_EN_S1PA                (1 << 6)
#define REG_CODEC_TX_EN_S2PA                (1 << 7)
#define REG_CODEC_TX_EN_S3PA                (1 << 8)
#define REG_CODEC_TX_EN_S4PA                (1 << 9)
#define REG_CODEC_TX_EN_S5PA                (1 << 10)
#define REG_PU_TX_REGULATOR                 (1 << 11)
#define REG_BYPASS_TX_REGULATOR             (1 << 12)
#define REG_CODEC_DAC_CLK_EDGE_SEL          (1 << 13)
#define REG_CODEC_TX_EAR_GAIN_SHIFT         14
#define REG_CODEC_TX_EAR_GAIN_MASK          (0x3 << REG_CODEC_TX_EAR_GAIN_SHIFT)
#define REG_CODEC_TX_EAR_GAIN(n)            BITFIELD_VAL(REG_CODEC_TX_EAR_GAIN, n)

// REG_176
#define REG_CODEC_TX_EN_LPPA                (1 << 0)
#define REG_CODEC_TX_SW_MODE                (1 << 1)
#define DRE_GAIN_SEL_L                      (1 << 2)

#define CFG_TX_TREE_EN                      (1 << 4)
#define CFG_TX_CH0_MUTE                     (1 << 5)
#define CFG_TX_CH1_MUTE                     (1 << 6)
#define CFG_TX_CLK_INV                      (1 << 7)
#define CFG_CODEC_DIN_L_RST                 (1 << 8)
#define REG_CODEC_TX_EAR_VCM_SHIFT          9
#define REG_CODEC_TX_EAR_VCM_MASK           (0x7 << REG_CODEC_TX_EAR_VCM_SHIFT)
#define REG_CODEC_TX_EAR_VCM(n)             BITFIELD_VAL(REG_CODEC_TX_EAR_VCM, n)


// REG_177
#define CODEC_DIN_L_HI_RSTVAL_SHIFT         0
#define CODEC_DIN_L_HI_RSTVAL_MASK          (0xFFFF << CODEC_DIN_L_HI_RSTVAL_SHIFT)
#define CODEC_DIN_L_HI_RSTVAL(n)            BITFIELD_VAL(CODEC_DIN_L_HI_RSTVAL, n)

// REG_178
#define CODEC_DIN_L_LO_RSTVAL_SHIFT         0
#define CODEC_DIN_L_LO_RSTVAL_MASK          (0xFFFF << CODEC_DIN_L_LO_RSTVAL_SHIFT)
#define CODEC_DIN_L_LO_RSTVAL(n)            BITFIELD_VAL(CODEC_DIN_L_LO_RSTVAL, n)





// REG_17B
#define REG_CODEC_CASN_L_SHIFT              0
#define REG_CODEC_CASN_L_MASK               (0x3 << REG_CODEC_CASN_L_SHIFT)
#define REG_CODEC_CASN_L(n)                 BITFIELD_VAL(REG_CODEC_CASN_L, n)

#define REG_CODEC_CASP_L_SHIFT              4
#define REG_CODEC_CASP_L_MASK               (0x3 << REG_CODEC_CASP_L_SHIFT)
#define REG_CODEC_CASP_L(n)                 BITFIELD_VAL(REG_CODEC_CASP_L, n)

#define REG_CODEC_TX_IB_SEL_ST2_SHIFT       8
#define REG_CODEC_TX_IB_SEL_ST2_MASK        (0x3 << REG_CODEC_TX_IB_SEL_ST2_SHIFT)
#define REG_CODEC_TX_IB_SEL_ST2(n)          BITFIELD_VAL(REG_CODEC_TX_IB_SEL_ST2, n)
#define REG_CODEC_TX_EN_DY_CC               (1 << 10)
#define REG_CODEC_TX_OC_PATH                (1 << 11)
#define REG_CODEC_TX_OFF_RANGE_X2           (1 << 12)
#define REG_CODEC_TX_VSEL_DY_CC_SHIFT       13
#define REG_CODEC_TX_VSEL_DY_CC_MASK        (0x3 << REG_CODEC_TX_VSEL_DY_CC_SHIFT)
#define REG_CODEC_TX_VSEL_DY_CC(n)          BITFIELD_VAL(REG_CODEC_TX_VSEL_DY_CC, n)


// REG_17C
#define REG_CODEC_TX_VREFBUF_CAS_L_SHIFT    0
#define REG_CODEC_TX_VREFBUF_CAS_L_MASK     (0x3 << REG_CODEC_TX_VREFBUF_CAS_L_SHIFT)
#define REG_CODEC_TX_VREFBUF_CAS_L(n)       BITFIELD_VAL(REG_CODEC_TX_VREFBUF_CAS_L, n)

#define REG_CODEC_TX_VREFBUF_ISEL_SHIFT     4
#define REG_CODEC_TX_VREFBUF_ISEL_MASK      (0x7 << REG_CODEC_TX_VREFBUF_ISEL_SHIFT)
#define REG_CODEC_TX_VREFBUF_ISEL(n)        BITFIELD_VAL(REG_CODEC_TX_VREFBUF_ISEL, n)
#define REG_DIG_LVLSHIFT_0P40P8_EN          (1 << 7)
#define REG_DIG_LVLSHIFT_0P81P8_EN          (1 << 8)
#define REG_DAC_LOWGAIN_SHIFT               9
#define REG_DAC_LOWGAIN_MASK                (0x3 << REG_DAC_LOWGAIN_SHIFT)
#define REG_DAC_LOWGAIN(n)                  BITFIELD_VAL(REG_DAC_LOWGAIN, n)
#define REG_CODEC_TX_VREF_RZ                (1 << 11)





// REG_17D
#define REG_ZERO_DETECT_CHANGE              (1 << 2)



#define REG_PU_ZERO_DET_L                   (1 << 6)



// REG_17E
#define REG_DEGLITCH_EN                     (1 << 0)
#define REG_GLITCH_NUM_SHIFT                1
#define REG_GLITCH_NUM_MASK                 (0x7 << REG_GLITCH_NUM_SHIFT)
#define REG_GLITCH_NUM(n)                   BITFIELD_VAL(REG_GLITCH_NUM, n)
#define REG_SOFT_RST_DEGLITCH               (1 << 4)
#define REG_CLKMUX_LOWF_IN                  (1 << 5)


// REG_17F
#define TX_PEAK_DET_STATUS                  (1 << 0)
#define TX_PEAK_DET_NL_STATUS               (1 << 1)

#define TX_PEAK_DET_PL_STATUS               (1 << 3)

#define VOICE_OUTN                          (1 << 5)
#define VOICE_OUTP                          (1 << 6)


// REG_181
#define REG_RCOSC48M_CALIB_EN               (1 << 0)
#define REG_RCOSC48M_LLC_SFT_RSTN           (1 << 1)
#define REG_RCOSC48M_POLAR_SEL              (1 << 2)
#define REG_REF_24M_DIV_SHIFT               3
#define REG_REF_24M_DIV_MASK                (0x3F << REG_REF_24M_DIV_SHIFT)
#define REG_REF_24M_DIV(n)                  BITFIELD_VAL(REG_REF_24M_DIV, n)
#define REG_RCOSC48M_TUN_CODE_DR            (1 << 9)
#define REG_RCOSC48M_TUN_CODE_SHIFT         10
#define REG_RCOSC48M_TUN_CODE_MASK          (0x3F << REG_RCOSC48M_TUN_CODE_SHIFT)
#define REG_RCOSC48M_TUN_CODE(n)            BITFIELD_VAL(REG_RCOSC48M_TUN_CODE, n)

// REG_182
#define REG_RCOSC48M_GOAL_CNT_MARK_15_0_SHIFT 0
#define REG_RCOSC48M_GOAL_CNT_MARK_15_0_MASK (0xFFFF << REG_RCOSC48M_GOAL_CNT_MARK_15_0_SHIFT)
#define REG_RCOSC48M_GOAL_CNT_MARK_15_0(n)  BITFIELD_VAL(REG_RCOSC48M_GOAL_CNT_MARK_15_0, n)


// REG_183
#define REG_RCOSC48M_REF_DIV_NUM_SHIFT      0
#define REG_RCOSC48M_REF_DIV_NUM_MASK       (0x3FF << REG_RCOSC48M_REF_DIV_NUM_SHIFT)
#define REG_RCOSC48M_REF_DIV_NUM(n)         BITFIELD_VAL(REG_RCOSC48M_REF_DIV_NUM, n)
#define REG_RCOSC48M_GOAL_CNT_MARK_16       (1 << 10)
#define DBG_RCOSC48M_GOAL_CNT_16_13_SHIFT   11
#define DBG_RCOSC48M_GOAL_CNT_16_13_MASK    (0xF << DBG_RCOSC48M_GOAL_CNT_16_13_SHIFT)
#define DBG_RCOSC48M_GOAL_CNT_16_13(n)      BITFIELD_VAL(DBG_RCOSC48M_GOAL_CNT_16_13, n)

// REG_184
#define DBG_RCOSC48M_STATE_SHIFT            0
#define DBG_RCOSC48M_STATE_MASK             (0x3 << DBG_RCOSC48M_STATE_SHIFT)
#define DBG_RCOSC48M_STATE(n)               BITFIELD_VAL(DBG_RCOSC48M_STATE, n)
#define DBG_RCOSC48M_TUN_DONE               (1 << 2)
#define DBG_RCOSC48M_GOAL_CNT_12_0_SHIFT    3
#define DBG_RCOSC48M_GOAL_CNT_12_0_MASK     (0x1FFF << DBG_RCOSC48M_GOAL_CNT_12_0_SHIFT)
#define DBG_RCOSC48M_GOAL_CNT_12_0(n)       BITFIELD_VAL(DBG_RCOSC48M_GOAL_CNT_12_0, n)

// REG_185
#define DBG_RCOSC48M_REF_CNT_SHIFT          0
#define DBG_RCOSC48M_REF_CNT_MASK           (0x3FF << DBG_RCOSC48M_REF_CNT_SHIFT)
#define DBG_RCOSC48M_REF_CNT(n)             BITFIELD_VAL(DBG_RCOSC48M_REF_CNT, n)
#define DIG_VOICE_ADC_FTRIM_SHIFT           10
#define DIG_VOICE_ADC_FTRIM_MASK            (0x3F << DIG_VOICE_ADC_FTRIM_SHIFT)
#define DIG_VOICE_ADC_FTRIM(n)              BITFIELD_VAL(DIG_VOICE_ADC_FTRIM, n)

// REG_186
#define RESERVED_ANA_15_0_SHIFT             0
#define RESERVED_ANA_15_0_MASK              (0xFFFF << RESERVED_ANA_15_0_SHIFT)
#define RESERVED_ANA_15_0(n)                BITFIELD_VAL(RESERVED_ANA_15_0, n)

// REG_187
#define RESERVED_ANA_31_16_SHIFT            0
#define RESERVED_ANA_31_16_MASK             (0xFFFF << RESERVED_ANA_31_16_SHIFT)
#define RESERVED_ANA_31_16(n)               BITFIELD_VAL(RESERVED_ANA_31_16, n)

// REG_188
#define RESERVED_ANA_47_32_SHIFT            0
#define RESERVED_ANA_47_32_MASK             (0xFFFF << RESERVED_ANA_47_32_SHIFT)
#define RESERVED_ANA_47_32(n)               BITFIELD_VAL(RESERVED_ANA_47_32, n)

// REG_189
#define RESERVED_ANA_55_48_SHIFT            0
#define RESERVED_ANA_55_48_MASK             (0xFF << RESERVED_ANA_55_48_SHIFT)
#define RESERVED_ANA_55_48(n)               BITFIELD_VAL(RESERVED_ANA_55_48, n)

// REG_18A
#define REG_CODEC_TX_EAR_GAIN_CHANGE        (1 << 10)
#define REG_CODEC_CLASSD_OP2_IBSEL_SHIFT    11
#define REG_CODEC_CLASSD_OP2_IBSEL_MASK     (0xF << REG_CODEC_CLASSD_OP2_IBSEL_SHIFT)
#define REG_CODEC_CLASSD_OP2_IBSEL(n)       BITFIELD_VAL(REG_CODEC_CLASSD_OP2_IBSEL, n)

// REG_18B
#define REG_CODEC_CLASSD_CMFB_OP_IBIT       (1 << 0)
#define REG_CODEC_CLASSD_COMPARATOR_IBIT    (1 << 1)

#define REG_CODEC_CLASSD_OP1_C_SEL          (1 << 3)
#define REG_CODEC_CLASSD_PWMCMFB_OP_IBIT    (1 << 4)
#define REG_CODEC_CLASSD_TRIGEN_OP_IBIT     (1 << 5)
#define REG_CODEC_PU_CLASSD_DSAMPLE         (1 << 6)
#define REG_CODEC_CLASSD_BIAS_TRIGEN_SHIFT  7
#define REG_CODEC_CLASSD_BIAS_TRIGEN_MASK   (0x3 << REG_CODEC_CLASSD_BIAS_TRIGEN_SHIFT)
#define REG_CODEC_CLASSD_BIAS_TRIGEN(n)     BITFIELD_VAL(REG_CODEC_CLASSD_BIAS_TRIGEN, n)
#define REG_CODEC_CLASSD_OP1_IBSEL_SHIFT    9
#define REG_CODEC_CLASSD_OP1_IBSEL_MASK     (0xF << REG_CODEC_CLASSD_OP1_IBSEL_SHIFT)
#define REG_CODEC_CLASSD_OP1_IBSEL(n)       BITFIELD_VAL(REG_CODEC_CLASSD_OP1_IBSEL, n)



// REG_260
#define REVID_SHIFT                         0
#define REVID_MASK                          (0xF << REVID_SHIFT)
#define REVID(n)                            BITFIELD_VAL(REVID, n)


// REG_261
#define REG_SAR_INIT_CALI_BIT_SHIFT         0
#define REG_SAR_INIT_CALI_BIT_MASK          (0x1F << REG_SAR_INIT_CALI_BIT_SHIFT)
#define REG_SAR_INIT_CALI_BIT(n)            BITFIELD_VAL(REG_SAR_INIT_CALI_BIT, n)
#define REG_SAR_CALI                        (1 << 5)
#define REG_SAR_CALI_CNT_SHIFT              6
#define REG_SAR_CALI_CNT_MASK               (0xF << REG_SAR_CALI_CNT_SHIFT)
#define REG_SAR_CALI_CNT(n)                 BITFIELD_VAL(REG_SAR_CALI_CNT, n)
#define REG_SAR_CALI_LSB_SCRN               (1 << 10)
#define REG_SAR_WEIGHT_DR                   (1 << 11)
#define REG_SAR_OFFSET_DR                   (1 << 12)
#define REG_SAR_ADC_OFFSET_DR               (1 << 13)
#define CLK_SARADC_CODEC_INV                (1 << 14)
#define REG_CLK_SAR_MUX                     (1 << 15)

// REG_262
#define REG_SAR_OFFSET_P_SHIFT              0
#define REG_SAR_OFFSET_P_MASK               (0x1F << REG_SAR_OFFSET_P_SHIFT)
#define REG_SAR_OFFSET_P(n)                 BITFIELD_VAL(REG_SAR_OFFSET_P, n)
#define REG_SAR_OFFSET_N_SHIFT              5
#define REG_SAR_OFFSET_N_MASK               (0x1F << REG_SAR_OFFSET_N_SHIFT)
#define REG_SAR_OFFSET_N(n)                 BITFIELD_VAL(REG_SAR_OFFSET_N, n)
#define REG_SAR_DELAY_CMP                   (1 << 10)
#define REG_SAR_HIGH_DVDD_EN                (1 << 11)
#define REG_SAR_HIGH_PW_CMP                 (1 << 12)
#define REG_SAR_PGA_EN_IN                   (1 << 13)
#define REG_SAR_DIFF_EN_IN_DR               (1 << 14)
#define REG_SAR_DIFF_EN_IN_REG              (1 << 15)

// REG_263
#define REG_SAR_ADC_OFFSET_SHIFT            0
#define REG_SAR_ADC_OFFSET_MASK             (0xFFFF << REG_SAR_ADC_OFFSET_SHIFT)
#define REG_SAR_ADC_OFFSET(n)               BITFIELD_VAL(REG_SAR_ADC_OFFSET, n)

// REG_264
#define REG_SAR_ADC_OFFSET_IN_SHIFT         0
#define REG_SAR_ADC_OFFSET_IN_MASK          (0xFFFF << REG_SAR_ADC_OFFSET_IN_SHIFT)
#define REG_SAR_ADC_OFFSET_IN(n)            BITFIELD_VAL(REG_SAR_ADC_OFFSET_IN, n)

// REG_265
#define REG_SAR_OFFSET_CALI                 (1 << 0)
#define REG_SAR_OFFSET_CALI_CNT_SHIFT       1
#define REG_SAR_OFFSET_CALI_CNT_MASK        (0x7 << REG_SAR_OFFSET_CALI_CNT_SHIFT)
#define REG_SAR_OFFSET_CALI_CNT(n)          BITFIELD_VAL(REG_SAR_OFFSET_CALI_CNT, n)
#define REG_SAR_CLK_OUT_SEL                 (1 << 4)
#define REG_SAR_CLK_INT_DIV_SHIFT           5
#define REG_SAR_CLK_INT_DIV_MASK            (0x7F << REG_SAR_CLK_INT_DIV_SHIFT)
#define REG_SAR_CLK_INT_DIV(n)              BITFIELD_VAL(REG_SAR_CLK_INT_DIV, n)
#define SAR_VOUT_CALIB_INV                  (1 << 12)
#define SAR_CONV_DONE_INV                   (1 << 13)
#define REG_SAR_RESULT_SEL                  (1 << 14)
#define REG_SAR_ADC_ON                      (1 << 15)

// REG_266
#define REG_SAR_CH_SEL_IN_SHIFT             0
#define REG_SAR_CH_SEL_IN_MASK              (0xFF << REG_SAR_CH_SEL_IN_SHIFT)
#define REG_SAR_CH_SEL_IN(n)                BITFIELD_VAL(REG_SAR_CH_SEL_IN, n)
#define REG_SAR_CLK_TRIM_SHIFT              8
#define REG_SAR_CLK_TRIM_MASK               (0x3 << REG_SAR_CLK_TRIM_SHIFT)
#define REG_SAR_CLK_TRIM(n)                 BITFIELD_VAL(REG_SAR_CLK_TRIM, n)
#define REG_SAR_CLK_MODE                    (1 << 10)
#define REG_SAR_DELAY_BIT_SHIFT             11
#define REG_SAR_DELAY_BIT_MASK              (0x3 << REG_SAR_DELAY_BIT_SHIFT)
#define REG_SAR_DELAY_BIT(n)                BITFIELD_VAL(REG_SAR_DELAY_BIT, n)
#define REG_SAR_EN_PREAMP                   (1 << 13)
#define REG_SAR_CLK_EN                      (1 << 14)

// REG_267
#define REG_SAR_PU_PIN_BIAS                 (1 << 0)
#define REG_SAR_PU_NIN_BIAS                 (1 << 1)
#define REG_SAR_SE_MODE                     (1 << 2)
#define REG_SAR_THERM_GAIN_IN_SHIFT         3
#define REG_SAR_THERM_GAIN_IN_MASK          (0x3 << REG_SAR_THERM_GAIN_IN_SHIFT)
#define REG_SAR_THERM_GAIN_IN(n)            BITFIELD_VAL(REG_SAR_THERM_GAIN_IN, n)
#define REG_SAR_VREG_IBIT_SHIFT             5
#define REG_SAR_VREG_IBIT_MASK              (0x3 << REG_SAR_VREG_IBIT_SHIFT)
#define REG_SAR_VREG_IBIT(n)                BITFIELD_VAL(REG_SAR_VREG_IBIT, n)
#define REG_SAR_VREG_OUTCAP_MODE_SHIFT      7
#define REG_SAR_VREG_OUTCAP_MODE_MASK       (0x3 << REG_SAR_VREG_OUTCAP_MODE_SHIFT)
#define REG_SAR_VREG_OUTCAP_MODE(n)         BITFIELD_VAL(REG_SAR_VREG_OUTCAP_MODE, n)
#define REG_SAR_VREG_SEL_SHIFT              9
#define REG_SAR_VREG_SEL_MASK               (0xF << REG_SAR_VREG_SEL_SHIFT)
#define REG_SAR_VREG_SEL(n)                 BITFIELD_VAL(REG_SAR_VREG_SEL, n)




// REG_268
#define REG_SAR_CLK_OUT_DIV_SHIFT           0
#define REG_SAR_CLK_OUT_DIV_MASK            (0x1FFF << REG_SAR_CLK_OUT_DIV_SHIFT)
#define REG_SAR_CLK_OUT_DIV(n)              BITFIELD_VAL(REG_SAR_CLK_OUT_DIV, n)


// REG_269
#define REG_SAR_PU_VREF_DR                  (1 << 0)
#define REG_SAR_PU_VREF_REG                 (1 << 1)
#define REG_SAR_PU_VREF_IN                  (1 << 2)
#define REG_SAR_PU_DR                       (1 << 3)
#define REG_SAR_PU_REG                      (1 << 4)
#define REG_SAR_PU_PRECHARGE_DR             (1 << 5)
#define REG_SAR_PU_PRECHARGE_REG            (1 << 6)
#define REG_SAR_PU_RST_DR                   (1 << 7)
#define REG_SAR_PU_RST_REG                  (1 << 8)
#define REG_SAR_PU_START_DLY_CNT_SHIFT      9
#define REG_SAR_PU_START_DLY_CNT_MASK       (0x7F << REG_SAR_PU_START_DLY_CNT_SHIFT)
#define REG_SAR_PU_START_DLY_CNT(n)         BITFIELD_VAL(REG_SAR_PU_START_DLY_CNT, n)

// REG_26A
#define REG_SAR_PU_PRECHARGE_START_DLY_CNT_SHIFT 0
#define REG_SAR_PU_PRECHARGE_START_DLY_CNT_MASK (0x7F << REG_SAR_PU_PRECHARGE_START_DLY_CNT_SHIFT)
#define REG_SAR_PU_PRECHARGE_START_DLY_CNT(n) BITFIELD_VAL(REG_SAR_PU_PRECHARGE_START_DLY_CNT, n)
#define REG_SAR_PU_RST_START_DLY_CNT_SHIFT  7
#define REG_SAR_PU_RST_START_DLY_CNT_MASK   (0x7F << REG_SAR_PU_RST_START_DLY_CNT_SHIFT)
#define REG_SAR_PU_RST_START_DLY_CNT(n)     BITFIELD_VAL(REG_SAR_PU_RST_START_DLY_CNT, n)


// REG_26B
#define REG_SAR_PU_RST_LAST_CNT_SHIFT       0
#define REG_SAR_PU_RST_LAST_CNT_MASK        (0x7F << REG_SAR_PU_RST_LAST_CNT_SHIFT)
#define REG_SAR_PU_RST_LAST_CNT(n)          BITFIELD_VAL(REG_SAR_PU_RST_LAST_CNT, n)
#define REG_SAR_PU_PRECHARGE_LAST_CNT_SHIFT 7
#define REG_SAR_PU_PRECHARGE_LAST_CNT_MASK  (0x1FF << REG_SAR_PU_PRECHARGE_LAST_CNT_SHIFT)
#define REG_SAR_PU_PRECHARGE_LAST_CNT(n)    BITFIELD_VAL(REG_SAR_PU_PRECHARGE_LAST_CNT, n)

// REG_26C
#define REG_SAR_OFFSET_P_OUT_SHIFT          0
#define REG_SAR_OFFSET_P_OUT_MASK           (0x1F << REG_SAR_OFFSET_P_OUT_SHIFT)
#define REG_SAR_OFFSET_P_OUT(n)             BITFIELD_VAL(REG_SAR_OFFSET_P_OUT, n)
#define REG_SAR_OFFSET_N_OUT_SHIFT          5
#define REG_SAR_OFFSET_N_OUT_MASK           (0x1F << REG_SAR_OFFSET_N_OUT_SHIFT)
#define REG_SAR_OFFSET_N_OUT(n)             BITFIELD_VAL(REG_SAR_OFFSET_N_OUT, n)



// REG_271
#define SAR_BIT00_WEIGHT_SHIFT              0
#define SAR_BIT00_WEIGHT_MASK               (0x3FFF << SAR_BIT00_WEIGHT_SHIFT)
#define SAR_BIT00_WEIGHT(n)                 BITFIELD_VAL(SAR_BIT00_WEIGHT, n)


// REG_272
#define SAR_BIT01_WEIGHT_SHIFT              0
#define SAR_BIT01_WEIGHT_MASK               (0x3FFF << SAR_BIT01_WEIGHT_SHIFT)
#define SAR_BIT01_WEIGHT(n)                 BITFIELD_VAL(SAR_BIT01_WEIGHT, n)


// REG_273
#define SAR_BIT02_WEIGHT_SHIFT              0
#define SAR_BIT02_WEIGHT_MASK               (0x3FFF << SAR_BIT02_WEIGHT_SHIFT)
#define SAR_BIT02_WEIGHT(n)                 BITFIELD_VAL(SAR_BIT02_WEIGHT, n)


// REG_274
#define SAR_BIT03_WEIGHT_SHIFT              0
#define SAR_BIT03_WEIGHT_MASK               (0x3FFF << SAR_BIT03_WEIGHT_SHIFT)
#define SAR_BIT03_WEIGHT(n)                 BITFIELD_VAL(SAR_BIT03_WEIGHT, n)


// REG_275
#define SAR_BIT04_WEIGHT_SHIFT              0
#define SAR_BIT04_WEIGHT_MASK               (0x3FFF << SAR_BIT04_WEIGHT_SHIFT)
#define SAR_BIT04_WEIGHT(n)                 BITFIELD_VAL(SAR_BIT04_WEIGHT, n)


// REG_276
#define SAR_P_BIT05_WEIGHT_SHIFT            0
#define SAR_P_BIT05_WEIGHT_MASK             (0x3FFF << SAR_P_BIT05_WEIGHT_SHIFT)
#define SAR_P_BIT05_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT05_WEIGHT, n)


// REG_277
#define SAR_P_BIT06_WEIGHT_SHIFT            0
#define SAR_P_BIT06_WEIGHT_MASK             (0x3FFF << SAR_P_BIT06_WEIGHT_SHIFT)
#define SAR_P_BIT06_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT06_WEIGHT, n)


// REG_278
#define SAR_P_BIT07_WEIGHT_SHIFT            0
#define SAR_P_BIT07_WEIGHT_MASK             (0x3FFF << SAR_P_BIT07_WEIGHT_SHIFT)
#define SAR_P_BIT07_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT07_WEIGHT, n)


// REG_279
#define SAR_P_BIT08_WEIGHT_SHIFT            0
#define SAR_P_BIT08_WEIGHT_MASK             (0x3FFF << SAR_P_BIT08_WEIGHT_SHIFT)
#define SAR_P_BIT08_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT08_WEIGHT, n)


// REG_27A
#define SAR_P_BIT09_WEIGHT_SHIFT            0
#define SAR_P_BIT09_WEIGHT_MASK             (0x3FFF << SAR_P_BIT09_WEIGHT_SHIFT)
#define SAR_P_BIT09_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT09_WEIGHT, n)


// REG_27B
#define SAR_P_BIT10_WEIGHT_SHIFT            0
#define SAR_P_BIT10_WEIGHT_MASK             (0x3FFF << SAR_P_BIT10_WEIGHT_SHIFT)
#define SAR_P_BIT10_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT10_WEIGHT, n)


// REG_27C
#define SAR_P_BIT11_WEIGHT_SHIFT            0
#define SAR_P_BIT11_WEIGHT_MASK             (0x3FFF << SAR_P_BIT11_WEIGHT_SHIFT)
#define SAR_P_BIT11_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT11_WEIGHT, n)


// REG_27D
#define SAR_P_BIT12_WEIGHT_SHIFT            0
#define SAR_P_BIT12_WEIGHT_MASK             (0x3FFF << SAR_P_BIT12_WEIGHT_SHIFT)
#define SAR_P_BIT12_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT12_WEIGHT, n)


// REG_27E
#define SAR_P_BIT13_WEIGHT_SHIFT            0
#define SAR_P_BIT13_WEIGHT_MASK             (0x3FFF << SAR_P_BIT13_WEIGHT_SHIFT)
#define SAR_P_BIT13_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT13_WEIGHT, n)


// REG_27F
#define SAR_P_BIT14_WEIGHT_SHIFT            0
#define SAR_P_BIT14_WEIGHT_MASK             (0x3FFF << SAR_P_BIT14_WEIGHT_SHIFT)
#define SAR_P_BIT14_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT14_WEIGHT, n)


// REG_280
#define SAR_P_BIT15_WEIGHT_SHIFT            0
#define SAR_P_BIT15_WEIGHT_MASK             (0x3FFF << SAR_P_BIT15_WEIGHT_SHIFT)
#define SAR_P_BIT15_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT15_WEIGHT, n)


// REG_281
#define SAR_P_BIT16_WEIGHT_SHIFT            0
#define SAR_P_BIT16_WEIGHT_MASK             (0x3FFF << SAR_P_BIT16_WEIGHT_SHIFT)
#define SAR_P_BIT16_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT16_WEIGHT, n)


// REG_282
#define SAR_P_BIT17_WEIGHT_SHIFT            0
#define SAR_P_BIT17_WEIGHT_MASK             (0x3FFF << SAR_P_BIT17_WEIGHT_SHIFT)
#define SAR_P_BIT17_WEIGHT(n)               BITFIELD_VAL(SAR_P_BIT17_WEIGHT, n)


// REG_283
#define SAR_N_BIT05_WEIGHT_SHIFT            0
#define SAR_N_BIT05_WEIGHT_MASK             (0x3FFF << SAR_N_BIT05_WEIGHT_SHIFT)
#define SAR_N_BIT05_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT05_WEIGHT, n)


// REG_284
#define SAR_N_BIT06_WEIGHT_SHIFT            0
#define SAR_N_BIT06_WEIGHT_MASK             (0x3FFF << SAR_N_BIT06_WEIGHT_SHIFT)
#define SAR_N_BIT06_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT06_WEIGHT, n)


// REG_285
#define SAR_N_BIT07_WEIGHT_SHIFT            0
#define SAR_N_BIT07_WEIGHT_MASK             (0x3FFF << SAR_N_BIT07_WEIGHT_SHIFT)
#define SAR_N_BIT07_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT07_WEIGHT, n)


// REG_286
#define SAR_N_BIT08_WEIGHT_SHIFT            0
#define SAR_N_BIT08_WEIGHT_MASK             (0x3FFF << SAR_N_BIT08_WEIGHT_SHIFT)
#define SAR_N_BIT08_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT08_WEIGHT, n)


// REG_287
#define SAR_N_BIT09_WEIGHT_SHIFT            0
#define SAR_N_BIT09_WEIGHT_MASK             (0x3FFF << SAR_N_BIT09_WEIGHT_SHIFT)
#define SAR_N_BIT09_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT09_WEIGHT, n)


// REG_288
#define SAR_N_BIT10_WEIGHT_SHIFT            0
#define SAR_N_BIT10_WEIGHT_MASK             (0x3FFF << SAR_N_BIT10_WEIGHT_SHIFT)
#define SAR_N_BIT10_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT10_WEIGHT, n)


// REG_289
#define SAR_N_BIT11_WEIGHT_SHIFT            0
#define SAR_N_BIT11_WEIGHT_MASK             (0x3FFF << SAR_N_BIT11_WEIGHT_SHIFT)
#define SAR_N_BIT11_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT11_WEIGHT, n)


// REG_28A
#define SAR_N_BIT12_WEIGHT_SHIFT            0
#define SAR_N_BIT12_WEIGHT_MASK             (0x3FFF << SAR_N_BIT12_WEIGHT_SHIFT)
#define SAR_N_BIT12_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT12_WEIGHT, n)


// REG_28B
#define SAR_N_BIT13_WEIGHT_SHIFT            0
#define SAR_N_BIT13_WEIGHT_MASK             (0x3FFF << SAR_N_BIT13_WEIGHT_SHIFT)
#define SAR_N_BIT13_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT13_WEIGHT, n)


// REG_28C
#define SAR_N_BIT14_WEIGHT_SHIFT            0
#define SAR_N_BIT14_WEIGHT_MASK             (0x3FFF << SAR_N_BIT14_WEIGHT_SHIFT)
#define SAR_N_BIT14_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT14_WEIGHT, n)


// REG_28D
#define SAR_N_BIT15_WEIGHT_SHIFT            0
#define SAR_N_BIT15_WEIGHT_MASK             (0x3FFF << SAR_N_BIT15_WEIGHT_SHIFT)
#define SAR_N_BIT15_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT15_WEIGHT, n)


// REG_28E
#define SAR_N_BIT16_WEIGHT_SHIFT            0
#define SAR_N_BIT16_WEIGHT_MASK             (0x3FFF << SAR_N_BIT16_WEIGHT_SHIFT)
#define SAR_N_BIT16_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT16_WEIGHT, n)


// REG_28F
#define SAR_N_BIT17_WEIGHT_SHIFT            0
#define SAR_N_BIT17_WEIGHT_MASK             (0x3FFF << SAR_N_BIT17_WEIGHT_SHIFT)
#define SAR_N_BIT17_WEIGHT(n)               BITFIELD_VAL(SAR_N_BIT17_WEIGHT, n)



// REG_291
#define SAR_P_BIT05_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT05_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT05_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT05_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT05_WEIGHT_OUT, n)


// REG_292
#define SAR_P_BIT06_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT06_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT06_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT06_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT06_WEIGHT_OUT, n)


// REG_293
#define SAR_P_BIT07_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT07_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT07_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT07_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT07_WEIGHT_OUT, n)


// REG_294
#define SAR_P_BIT08_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT08_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT08_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT08_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT08_WEIGHT_OUT, n)


// REG_295
#define SAR_P_BIT09_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT09_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT09_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT09_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT09_WEIGHT_OUT, n)


// REG_296
#define SAR_P_BIT10_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT10_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT10_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT10_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT10_WEIGHT_OUT, n)


// REG_297
#define SAR_P_BIT11_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT11_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT11_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT11_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT11_WEIGHT_OUT, n)


// REG_298
#define SAR_P_BIT12_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT12_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT12_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT12_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT12_WEIGHT_OUT, n)


// REG_299
#define SAR_P_BIT13_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT13_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT13_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT13_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT13_WEIGHT_OUT, n)


// REG_29A
#define SAR_P_BIT14_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT14_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT14_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT14_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT14_WEIGHT_OUT, n)


// REG_29B
#define SAR_P_BIT15_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT15_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT15_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT15_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT15_WEIGHT_OUT, n)


// REG_29C
#define SAR_P_BIT16_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT16_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT16_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT16_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT16_WEIGHT_OUT, n)


// REG_29D
#define SAR_P_BIT17_WEIGHT_OUT_SHIFT        0
#define SAR_P_BIT17_WEIGHT_OUT_MASK         (0x3FFF << SAR_P_BIT17_WEIGHT_OUT_SHIFT)
#define SAR_P_BIT17_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_P_BIT17_WEIGHT_OUT, n)


// REG_29E
#define SAR_N_BIT05_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT05_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT05_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT05_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT05_WEIGHT_OUT, n)


// REG_29F
#define SAR_N_BIT06_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT06_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT06_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT06_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT06_WEIGHT_OUT, n)


// REG_2A0
#define SAR_N_BIT07_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT07_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT07_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT07_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT07_WEIGHT_OUT, n)


// REG_2A1
#define SAR_N_BIT08_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT08_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT08_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT08_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT08_WEIGHT_OUT, n)


// REG_2A2
#define SAR_N_BIT09_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT09_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT09_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT09_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT09_WEIGHT_OUT, n)


// REG_2A3
#define SAR_N_BIT10_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT10_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT10_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT10_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT10_WEIGHT_OUT, n)


// REG_2A4
#define SAR_N_BIT11_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT11_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT11_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT11_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT11_WEIGHT_OUT, n)


// REG_2A5
#define SAR_N_BIT12_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT12_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT12_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT12_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT12_WEIGHT_OUT, n)


// REG_2A6
#define SAR_N_BIT13_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT13_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT13_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT13_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT13_WEIGHT_OUT, n)


// REG_2A7
#define SAR_N_BIT14_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT14_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT14_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT14_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT14_WEIGHT_OUT, n)


// REG_2A8
#define SAR_N_BIT15_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT15_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT15_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT15_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT15_WEIGHT_OUT, n)


// REG_2A9
#define SAR_N_BIT16_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT16_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT16_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT16_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT16_WEIGHT_OUT, n)


// REG_2AA
#define SAR_N_BIT17_WEIGHT_OUT_SHIFT        0
#define SAR_N_BIT17_WEIGHT_OUT_MASK         (0x3FFF << SAR_N_BIT17_WEIGHT_OUT_SHIFT)
#define SAR_N_BIT17_WEIGHT_OUT(n)           BITFIELD_VAL(SAR_N_BIT17_WEIGHT_OUT, n)
#define SAR_DETECT                          (1 << 1)



// REG_2AB
#define REG_SAR_TRIG_ENABLE                 (1 << 0)
#define REG_SAR_TRIG_POL_RATE               (1 << 1)
#define REG_SAR_TRIG_DET_CLR                (1 << 2)
#define REG_SAR_TRIG_HPF_BYPASS             (1 << 3)
#define REG_SAR_TRIG_LPF_BYPASS             (1 << 4)
#define REG_SAR_TRIG_U_DC_SHIFT             5
#define REG_SAR_TRIG_U_DC_MASK              (0xF << REG_SAR_TRIG_U_DC_SHIFT)
#define REG_SAR_TRIG_U_DC(n)                BITFIELD_VAL(REG_SAR_TRIG_U_DC, n)
#define REG_SAR_TRIG_COEF_A1_SHIFT          9
#define REG_SAR_TRIG_COEF_A1_MASK           (0x7F << REG_SAR_TRIG_COEF_A1_SHIFT)
#define REG_SAR_TRIG_COEF_A1(n)             BITFIELD_VAL(REG_SAR_TRIG_COEF_A1, n)

// REG_2AC
#define REG_SAR_TRIG_COEF_B0_SHIFT          0
#define REG_SAR_TRIG_COEF_B0_MASK           (0x7F << REG_SAR_TRIG_COEF_B0_SHIFT)
#define REG_SAR_TRIG_COEF_B0(n)             BITFIELD_VAL(REG_SAR_TRIG_COEF_B0, n)
#define REG_SAR_TRIG_COEF_B1_SHIFT          7
#define REG_SAR_TRIG_COEF_B1_MASK           (0x7F << REG_SAR_TRIG_COEF_B1_SHIFT)
#define REG_SAR_TRIG_COEF_B1(n)             BITFIELD_VAL(REG_SAR_TRIG_COEF_B1, n)

// REG_2AD
#define REG_SAR_TRIG_TH_SHIFT               0
#define REG_SAR_TRIG_TH_MASK                (0xFFFF << REG_SAR_TRIG_TH_SHIFT)
#define REG_SAR_TRIG_TH(n)                  BITFIELD_VAL(REG_SAR_TRIG_TH, n)


// REG_2AE
#define SAR_TRIG_DOUT_ABS_SHIFT             0
#define SAR_TRIG_DOUT_ABS_MASK              (0xFFFF << SAR_TRIG_DOUT_ABS_SHIFT)
#define SAR_TRIG_DOUT_ABS(n)                BITFIELD_VAL(SAR_TRIG_DOUT_ABS, n)


// REG_2AF
#define CFG_SAR_DET_DELAY_SHIFT             0
#define CFG_SAR_DET_DELAY_MASK              (0xFFF << CFG_SAR_DET_DELAY_SHIFT)
#define CFG_SAR_DET_DELAY(n)                BITFIELD_VAL(CFG_SAR_DET_DELAY, n)
#define SAR_SWITCH2OSC_EN                   (1 << 12)
#define SEL_SARCLK_DIV2                     (1 << 13)
#define REG_SAR_TO_SIGN                     (1 << 14)
#define REG_SAR_CLOSE_ON_DET                (1 << 15)

// REG_2B0
#define SAR_DET_DLY_TIMER_SHIFT             0
#define SAR_DET_DLY_TIMER_MASK              (0xFF << SAR_DET_DLY_TIMER_SHIFT)
#define SAR_DET_DLY_TIMER(n)                BITFIELD_VAL(SAR_DET_DLY_TIMER, n)


// REG_360
#define REVID_SHIFT                         0
#define REVID_MASK                          (0xF << REVID_SHIFT)
#define REVID(n)                            BITFIELD_VAL(REVID, n)

// REG_361
#define REG_AUDPLL_DLF_RSTN                 (1 << 15)
#define REG_AUDPLL_DLF_RSTN_DR              (1 << 14)
#define REG_AUDPLL_DIV_CAL_EN               (1 << 13)
#define REG_AUDPLL_DIV_CAL_EN_DR            (1 << 12)
#define REG_AUDPLL_LDO_PRECHAR_VALUE_SHIFT  4
#define REG_AUDPLL_LDO_PRECHAR_VALUE_MASK   (0xFF << REG_AUDPLL_LDO_PRECHAR_VALUE_SHIFT)
#define REG_AUDPLL_LDO_PRECHAR_VALUE(n)     BITFIELD_VAL(REG_AUDPLL_LDO_PRECHAR_VALUE, n)
#define REG_AUDPLL_LDO_PRECHARGE            (1 << 3)
#define REG_AUDPLL_LDO_PRECHARGE_DR         (1 << 2)
#define REG_AUDPLL_LDO_PU                   (1 << 1)
#define REG_AUDPLL_LDO_PU_DR                (1 << 0)


// REG_362
#define REG_AUDPLL_CNT_TIME_SHIFT           12
#define REG_AUDPLL_CNT_TIME_MASK            (0x7 << REG_AUDPLL_CNT_TIME_SHIFT)
#define REG_AUDPLL_CNT_TIME(n)              BITFIELD_VAL(REG_AUDPLL_CNT_TIME, n)
#define REG_AUDPLL_WAIT_TIME_SHIFT          9
#define REG_AUDPLL_WAIT_TIME_MASK           (0x7 << REG_AUDPLL_WAIT_TIME_SHIFT)
#define REG_AUDPLL_WAIT_TIME(n)             BITFIELD_VAL(REG_AUDPLL_WAIT_TIME, n)
#define REG_AUDPLL_VCO_CAL_MANUAL           (1 << 8)
#define REG_AUDPLL_VCO_CAL_EN               (1 << 7)
#define REG_AUDPLL_CAL_CNT_EN               (1 << 6)
#define REG_AUDPLL_CAL_CNT_EN_DR            (1 << 5)
#define REG_AUDPLL_CAL_EN                   (1 << 4)
#define REG_AUDPLL_CAL_EN_DR                (1 << 3)
#define REG_AUDPLL_VCO_CAPBANK_DR           (1 << 2)
#define REG_AUDPLL_EN_OVER_THR              (1 << 1)
#define REG_AUDPLL_EN_OVER_THR_DR           (1 << 0)

// REG_363
#define REG_AUDPLL_VCO_CAPBANK_SHIFT        4
#define REG_AUDPLL_VCO_CAPBANK_MASK         (0xFFF << REG_AUDPLL_VCO_CAPBANK_SHIFT)
#define REG_AUDPLL_VCO_CAPBANK(n)           BITFIELD_VAL(REG_AUDPLL_VCO_CAPBANK, n)
#define REG_AUDPLL_CAL_OPT                  (1 << 3)
#define REG_AUDPLL_INIT_DELAY_SHIFT         0
#define REG_AUDPLL_INIT_DELAY_MASK          (0x7 << REG_AUDPLL_INIT_DELAY_SHIFT)
#define REG_AUDPLL_INIT_DELAY(n)            BITFIELD_VAL(REG_AUDPLL_INIT_DELAY, n)

// REG_364
#define REG_AUDPLL_EN_TDC_CLIPCTRL          (1 << 15)
#define REG_AUDPLL_DITHER_BYPASS            (1 << 14)
#define REG_AUDPLL_INT_DEC_SEL_SHIFT        11
#define REG_AUDPLL_INT_DEC_SEL_MASK         (0x7 << REG_AUDPLL_INT_DEC_SEL_SHIFT)
#define REG_AUDPLL_INT_DEC_SEL(n)           BITFIELD_VAL(REG_AUDPLL_INT_DEC_SEL, n)
#define REG_AUDPLL_CLK_FBC_EDGE             (1 << 10)
#define REG_AUDPLL_CAL_CLK_EN               (1 << 9)
#define REG_AUDPLL_CAL_CLK_EN_DR            (1 << 8)
#define REG_AUDPLL_TRI_STEP_SEL_SHIFT       6
#define REG_AUDPLL_TRI_STEP_SEL_MASK        (0x3 << REG_AUDPLL_TRI_STEP_SEL_SHIFT)
#define REG_AUDPLL_TRI_STEP_SEL(n)          BITFIELD_VAL(REG_AUDPLL_TRI_STEP_SEL, n)
#define REG_AUDPLL_TRI_FREQ_SEL_SHIFT       4
#define REG_AUDPLL_TRI_FREQ_SEL_MASK        (0x3 << REG_AUDPLL_TRI_FREQ_SEL_SHIFT)
#define REG_AUDPLL_TRI_FREQ_SEL(n)          BITFIELD_VAL(REG_AUDPLL_TRI_FREQ_SEL, n)
#define REG_AUDPLL_TRI_FREQ_OFST_SEL_SHIFT  1
#define REG_AUDPLL_TRI_FREQ_OFST_SEL_MASK   (0x7 << REG_AUDPLL_TRI_FREQ_OFST_SEL_SHIFT)
#define REG_AUDPLL_TRI_FREQ_OFST_SEL(n)     BITFIELD_VAL(REG_AUDPLL_TRI_FREQ_OFST_SEL, n)
#define REG_AUDPLL_SSC_ENABLE               (1 << 0)

// REG_365
#define REG_AUDPLL_CLKGEN_RST               (1 << 15)
#define REG_AUDPLL_CLKGEN_RST_DR            (1 << 14)
#define REG_AUDPLL_LOOP_CLOSE_RST           (1 << 13)
#define REG_AUDPLL_LOOP_CLOSE_RST_DR        (1 << 12)
#define REG_AUDPLL_ON                       (1 << 11)
#define REG_AUDPLL_ON_DR                    (1 << 10)
#define REG_AUDPLL_DIV_FRAC_SHIFT           8
#define REG_AUDPLL_DIV_FRAC_MASK            (0x3 << REG_AUDPLL_DIV_FRAC_SHIFT)
#define REG_AUDPLL_DIV_FRAC(n)              BITFIELD_VAL(REG_AUDPLL_DIV_FRAC, n)
#define REG_AUDPLL_DIV_INT_SHIFT            1
#define REG_AUDPLL_DIV_INT_MASK             (0x7F << REG_AUDPLL_DIV_INT_SHIFT)
#define REG_AUDPLL_DIV_INT(n)               BITFIELD_VAL(REG_AUDPLL_DIV_INT, n)
#define REG_AUDPLL_DIV_DR                   (1 << 0)

// REG_366
#define DIG_AUDPLL_DLF_OUT_SHIFT            9
#define DIG_AUDPLL_DLF_OUT_MASK             (0x7F << DIG_AUDPLL_DLF_OUT_SHIFT)
#define DIG_AUDPLL_DLF_OUT(n)               BITFIELD_VAL(DIG_AUDPLL_DLF_OUT, n)
#define DIG_AUDPLL_TDC_CNT1_SHIFT           2
#define DIG_AUDPLL_TDC_CNT1_MASK            (0x7F << DIG_AUDPLL_TDC_CNT1_SHIFT)
#define DIG_AUDPLL_TDC_CNT1(n)              BITFIELD_VAL(DIG_AUDPLL_TDC_CNT1, n)
#define DIG_AUDPLL_TDC_SEL_CHAN             (1 << 1)
#define DIG_AUDPLL_TDC_SIGN                 (1 << 0)


// REG_367
#define REG_AUDPLL_TDC_REF_EDGE_SEL         (1 << 14)
#define REG_AUDPLL_CALIB_BYPASS             (1 << 13)
#define REG_AUDPLL_TDC_GAIN_CAL             (1 << 12)
#define REG_AUDPLL_DIV_SDMB                 (1 << 11)
#define REG_AUDPLL_PU_DIV_DR                (1 << 10)
#define REG_AUDPLL_PU_DIV                   (1 << 9)
#define REG_AUDPLL_FORCE_LK                 (1 << 8)
#define REG_AUDPLL_SEL_DIG                  (1 << 7)

#define REG_AUDPLL_SDM_IN_CAP_DR            (1 << 5)
#define REG_AUDPLL_DIVN_AD_SHIFT            0
#define REG_AUDPLL_DIVN_AD_MASK             (0x1F << REG_AUDPLL_DIVN_AD_SHIFT)
#define REG_AUDPLL_DIVN_AD(n)               BITFIELD_VAL(REG_AUDPLL_DIVN_AD, n)

// REG_368
#define REG_AUDPLL_LD_COMB_DTH_SHIFT        8
#define REG_AUDPLL_LD_COMB_DTH_MASK         (0xFF << REG_AUDPLL_LD_COMB_DTH_SHIFT)
#define REG_AUDPLL_LD_COMB_DTH(n)           BITFIELD_VAL(REG_AUDPLL_LD_COMB_DTH, n)
#define REG_AUDPLL_PU_TDC                   (1 << 7)
#define REG_AUDPLL_PU_TDC_DR                (1 << 6)
#define REG_AUDPLL_CBIT_DCO_SHIFT           0
#define REG_AUDPLL_CBIT_DCO_MASK            (0x3F << REG_AUDPLL_CBIT_DCO_SHIFT)
#define REG_AUDPLL_CBIT_DCO(n)              BITFIELD_VAL(REG_AUDPLL_CBIT_DCO, n)

// REG_369
#define REG_AUDPLL_CLKGEN_SWRC_SHIFT        0
#define REG_AUDPLL_CLKGEN_SWRC_MASK         (0x3 << REG_AUDPLL_CLKGEN_SWRC_SHIFT)
#define REG_AUDPLL_CLKGEN_SWRC(n)           BITFIELD_VAL(REG_AUDPLL_CLKGEN_SWRC, n)
#define REG_AUDPLL_DCO_SDM_BYPASS           (1 << 2)
#define REG_AUDPLL_SDM_DR                   (1 << 3)
#define REG_AUDPLL_DCO_SDM_ORDER_SHIFT      4
#define REG_AUDPLL_DCO_SDM_ORDER_MASK       (0x3 << REG_AUDPLL_DCO_SDM_ORDER_SHIFT)
#define REG_AUDPLL_DCO_SDM_ORDER(n)         BITFIELD_VAL(REG_AUDPLL_DCO_SDM_ORDER, n)
#define REG_AUDPLL_SDM_PRBS_ABS_SHIFT       6
#define REG_AUDPLL_SDM_PRBS_ABS_MASK        (0x3 << REG_AUDPLL_SDM_PRBS_ABS_SHIFT)
#define REG_AUDPLL_SDM_PRBS_ABS(n)          BITFIELD_VAL(REG_AUDPLL_SDM_PRBS_ABS, n)
#define REG_AUDPLL_DCO_SWRC_SHIFT           8
#define REG_AUDPLL_DCO_SWRC_MASK            (0xF << REG_AUDPLL_DCO_SWRC_SHIFT)
#define REG_AUDPLL_DCO_SWRC(n)              BITFIELD_VAL(REG_AUDPLL_DCO_SWRC, n)
#define REG_AUDPLL_DIG_SWRC_SHIFT           12
#define REG_AUDPLL_DIG_SWRC_MASK            (0x3 << REG_AUDPLL_DIG_SWRC_SHIFT)
#define REG_AUDPLL_DIG_SWRC(n)              BITFIELD_VAL(REG_AUDPLL_DIG_SWRC, n)
#define REG_AUDPLL_BYPASS_ZPS               (1 << 14)
#define REG_AUDPLL_DIV_REFCLK_EDGE_SW       (1 << 15)

// REG_36A
#define REG_AUDPLL_PU_DR                    (1 << 15)
#define REG_AUDPLL_PU                       (1 << 14)
#define REG_AUDPLL_SDM_RESETN               (1 << 13)
#define REG_AUDPLL_SDM_RESETN_DR            (1 << 12)
#define REG_AUDPLL_CAL_RESETN               (1 << 11)
#define REG_AUDPLL_CAL_RESETN_DR            (1 << 10)
#define REG_AUDPLL_DIV_SDM_CLK_SEL          (1 << 9)
#define REG_AUDPLL_DIV_SWRC_SHIFT           7
#define REG_AUDPLL_DIV_SWRC_MASK            (0x3 << REG_AUDPLL_DIV_SWRC_SHIFT)
#define REG_AUDPLL_DIV_SWRC(n)              BITFIELD_VAL(REG_AUDPLL_DIV_SWRC, n)
#define REG_AUDPLL_DIV_SEL_SYNCLK_SHIFT     4
#define REG_AUDPLL_DIV_SEL_SYNCLK_MASK      (0x7 << REG_AUDPLL_DIV_SEL_SYNCLK_SHIFT)
#define REG_AUDPLL_DIV_SEL_SYNCLK(n)        BITFIELD_VAL(REG_AUDPLL_DIV_SEL_SYNCLK, n)
#define REG_AUDPLL_DIV_DELAY_CAP_SHIFT      0
#define REG_AUDPLL_DIV_DELAY_CAP_MASK       (0xF << REG_AUDPLL_DIV_DELAY_CAP_SHIFT)
#define REG_AUDPLL_DIV_DELAY_CAP(n)         BITFIELD_VAL(REG_AUDPLL_DIV_DELAY_CAP, n)

// REG_36B
#define REG_AUDPLL_DLF_G0_15_0_SHIFT        0
#define REG_AUDPLL_DLF_G0_15_0_MASK         (0xFFFF << REG_AUDPLL_DLF_G0_15_0_SHIFT)
#define REG_AUDPLL_DLF_G0_15_0(n)           BITFIELD_VAL(REG_AUDPLL_DLF_G0_15_0, n)

// REG_36C
#define REG_AUDPLL_RSTN                     (1 << 15)
#define REG_AUDPLL_RSTN_DR                  (1 << 14)
#define REG_AUDPLL_DLF_G0_18_16_SHIFT       11
#define REG_AUDPLL_DLF_G0_18_16_MASK        (0x7 << REG_AUDPLL_DLF_G0_18_16_SHIFT)
#define REG_AUDPLL_DLF_G0_18_16(n)          BITFIELD_VAL(REG_AUDPLL_DLF_G0_18_16, n)
#define REG_AUDPLL_DLF_P1_SHIFT             0
#define REG_AUDPLL_DLF_P1_MASK              (0x7FF << REG_AUDPLL_DLF_P1_SHIFT)
#define REG_AUDPLL_DLF_P1(n)                BITFIELD_VAL(REG_AUDPLL_DLF_P1, n)


// REG_36D
#define REG_AUDPLL_PU_CLKGEN_DR             (1 << 14)
#define REG_AUDPLL_PU_CLKGEN                (1 << 13)
#define REG_AUDPLL_DLF_P2_SHIFT             0
#define REG_AUDPLL_DLF_P2_MASK              (0x1FFF << REG_AUDPLL_DLF_P2_SHIFT)
#define REG_AUDPLL_DLF_P2(n)                BITFIELD_VAL(REG_AUDPLL_DLF_P2, n)

// REG_36E
#define REG_AUDPLL_DLY_LONG                 (1 << 15)
#define REG_AUDPLL_PU_DIG_DR                (1 << 14)
#define REG_AUDPLL_PU_DIG                   (1 << 13)
#define REG_AUDPLL_PU_DCO_DR                (1 << 12)
#define REG_AUDPLL_PU_DCO                   (1 << 11)
#define REG_AUDPLL_DLF_Z0_SHIFT             0
#define REG_AUDPLL_DLF_Z0_MASK              (0x7FF << REG_AUDPLL_DLF_Z0_SHIFT)
#define REG_AUDPLL_DLF_Z0(n)                BITFIELD_VAL(REG_AUDPLL_DLF_Z0, n)

// REG_36F
#define REG_AUDPLL_DWC_IN_VAL_15_0_SHIFT    0
#define REG_AUDPLL_DWC_IN_VAL_15_0_MASK     (0xFFFF << REG_AUDPLL_DWC_IN_VAL_15_0_SHIFT)
#define REG_AUDPLL_DWC_IN_VAL_15_0(n)       BITFIELD_VAL(REG_AUDPLL_DWC_IN_VAL_15_0, n)

// REG_370
#define REG_AUDPLL_DWC_IN_VAL_16            (1 << 0)
#define REG_AUDPLL_DWC_OUT_LO_VAL_SHIFT     1
#define REG_AUDPLL_DWC_OUT_LO_VAL_MASK      (0x7FFF << REG_AUDPLL_DWC_OUT_LO_VAL_SHIFT)
#define REG_AUDPLL_DWC_OUT_LO_VAL(n)        BITFIELD_VAL(REG_AUDPLL_DWC_OUT_LO_VAL, n)

// REG_371
#define REG_AUDPLL_DWC_OUT_HI_VAL_SHIFT     0
#define REG_AUDPLL_DWC_OUT_HI_VAL_MASK      (0xF << REG_AUDPLL_DWC_OUT_HI_VAL_SHIFT)
#define REG_AUDPLL_DWC_OUT_HI_VAL(n)        BITFIELD_VAL(REG_AUDPLL_DWC_OUT_HI_VAL, n)
#define REG_AUDPLL_EN_DWC_IN                (1 << 4)
#define REG_AUDPLL_EN_DWC_OUT               (1 << 5)
#define REG_AUDPLL_ILDO_DCO_DVDD_SHIFT      6
#define REG_AUDPLL_ILDO_DCO_DVDD_MASK       (0x3 << REG_AUDPLL_ILDO_DCO_DVDD_SHIFT)
#define REG_AUDPLL_ILDO_DCO_DVDD(n)         BITFIELD_VAL(REG_AUDPLL_ILDO_DCO_DVDD, n)
#define REG_AUDPLL_ILDO_DCO_SHIFT           8
#define REG_AUDPLL_ILDO_DCO_MASK            (0xF << REG_AUDPLL_ILDO_DCO_SHIFT)
#define REG_AUDPLL_ILDO_DCO(n)              BITFIELD_VAL(REG_AUDPLL_ILDO_DCO, n)
#define REG_AUDPLL_ILDO_DIG_SHIFT           12
#define REG_AUDPLL_ILDO_DIG_MASK            (0xF << REG_AUDPLL_ILDO_DIG_SHIFT)
#define REG_AUDPLL_ILDO_DIG(n)              BITFIELD_VAL(REG_AUDPLL_ILDO_DIG, n)

// REG_372
#define REG_AUDPLL_ILDO_DIV_SHIFT           0
#define REG_AUDPLL_ILDO_DIV_MASK            (0xF << REG_AUDPLL_ILDO_DIV_SHIFT)
#define REG_AUDPLL_ILDO_DIV(n)              BITFIELD_VAL(REG_AUDPLL_ILDO_DIV, n)
#define REG_AUDPLL_ILDO_TDC_SHIFT           4
#define REG_AUDPLL_ILDO_TDC_MASK            (0xF << REG_AUDPLL_ILDO_TDC_SHIFT)
#define REG_AUDPLL_ILDO_TDC(n)              BITFIELD_VAL(REG_AUDPLL_ILDO_TDC, n)
#define REG_AUDPLL_IPTAT_RES_SHIFT          8
#define REG_AUDPLL_IPTAT_RES_MASK           (0xF << REG_AUDPLL_IPTAT_RES_SHIFT)
#define REG_AUDPLL_IPTAT_RES(n)             BITFIELD_VAL(REG_AUDPLL_IPTAT_RES, n)
#define REG_AUDPLL_LDO_VRES_SHIFT           12
#define REG_AUDPLL_LDO_VRES_MASK            (0xF << REG_AUDPLL_LDO_VRES_SHIFT)
#define REG_AUDPLL_LDO_VRES(n)              BITFIELD_VAL(REG_AUDPLL_LDO_VRES, n)

// REG_373
#define REG_AUDPLL_LOAD_SDM_OUT_HI_SHIFT    0
#define REG_AUDPLL_LOAD_SDM_OUT_HI_MASK     (0xF << REG_AUDPLL_LOAD_SDM_OUT_HI_SHIFT)
#define REG_AUDPLL_LOAD_SDM_OUT_HI(n)       BITFIELD_VAL(REG_AUDPLL_LOAD_SDM_OUT_HI, n)
#define REG_AUDPLL_LOAD_SDM_OUT_LO_SHIFT    4
#define REG_AUDPLL_LOAD_SDM_OUT_LO_MASK     (0x3F << REG_AUDPLL_LOAD_SDM_OUT_LO_SHIFT)
#define REG_AUDPLL_LOAD_SDM_OUT_LO(n)       BITFIELD_VAL(REG_AUDPLL_LOAD_SDM_OUT_LO, n)
#define REG_AUDPLL_PFD_RSTB_IN              (1 << 10)
#define REG_AUDPLL_PFD_RSTB_SEL             (1 << 11)
#define REG_AUDPLL_PFD_SAMPLE_DLY_SHIFT     12
#define REG_AUDPLL_PFD_SAMPLE_DLY_MASK      (0x3 << REG_AUDPLL_PFD_SAMPLE_DLY_SHIFT)
#define REG_AUDPLL_PFD_SAMPLE_DLY(n)        BITFIELD_VAL(REG_AUDPLL_PFD_SAMPLE_DLY, n)
#define REG_AUDPLL_PFD_SIGN_FLIP            (1 << 14)
#define REG_AUDPLL_FREF_SEL                 (1 << 15)

// REG_374
#define REG_AUDPLL_SSC_DLY_NUM_SHIFT        0
#define REG_AUDPLL_SSC_DLY_NUM_MASK         (0xF << REG_AUDPLL_SSC_DLY_NUM_SHIFT)
#define REG_AUDPLL_SSC_DLY_NUM(n)           BITFIELD_VAL(REG_AUDPLL_SSC_DLY_NUM, n)
#define REG_AUDPLL_REFSSC_RANGE_SHIFT       4
#define REG_AUDPLL_REFSSC_RANGE_MASK        (0x3 << REG_AUDPLL_REFSSC_RANGE_SHIFT)
#define REG_AUDPLL_REFSSC_RANGE(n)          BITFIELD_VAL(REG_AUDPLL_REFSSC_RANGE, n)
#define REG_AUDPLL_REFSSC_BYP               (1 << 6)
#define REG_AUDPLL_REFSSC_RSTB              (1 << 7)
#define REG_AUDPLL_REFSSC_RSTB_DR           (1 << 8)
#define REG_AUDPLL_COMP_DELAY_NUM_SHIFT     9
#define REG_AUDPLL_COMP_DELAY_NUM_MASK      (0x3 << REG_AUDPLL_COMP_DELAY_NUM_SHIFT)
#define REG_AUDPLL_COMP_DELAY_NUM(n)        BITFIELD_VAL(REG_AUDPLL_COMP_DELAY_NUM, n)
#define REG_AUDPLL_SDM_COMP_GAIN_SEL_SHIFT  11
#define REG_AUDPLL_SDM_COMP_GAIN_SEL_MASK   (0x3 << REG_AUDPLL_SDM_COMP_GAIN_SEL_SHIFT)
#define REG_AUDPLL_SDM_COMP_GAIN_SEL(n)     BITFIELD_VAL(REG_AUDPLL_SDM_COMP_GAIN_SEL, n)
#define REG_AUDPLL_SDM_GCAL_DELAY_NUM_SHIFT 13
#define REG_AUDPLL_SDM_GCAL_DELAY_NUM_MASK  (0x3 << REG_AUDPLL_SDM_GCAL_DELAY_NUM_SHIFT)
#define REG_AUDPLL_SDM_GCAL_DELAY_NUM(n)    BITFIELD_VAL(REG_AUDPLL_SDM_GCAL_DELAY_NUM, n)


// REG_375
#define REG_AUDPLL_WAIT_SDM_DONE_DLY0_SHIFT 0
#define REG_AUDPLL_WAIT_SDM_DONE_DLY0_MASK  (0xF << REG_AUDPLL_WAIT_SDM_DONE_DLY0_SHIFT)
#define REG_AUDPLL_WAIT_SDM_DONE_DLY0(n)    BITFIELD_VAL(REG_AUDPLL_WAIT_SDM_DONE_DLY0, n)
#define REG_AUDPLL_WAIT_SDM_DONE_DLY1_SHIFT 4
#define REG_AUDPLL_WAIT_SDM_DONE_DLY1_MASK  (0xF << REG_AUDPLL_WAIT_SDM_DONE_DLY1_SHIFT)
#define REG_AUDPLL_WAIT_SDM_DONE_DLY1(n)    BITFIELD_VAL(REG_AUDPLL_WAIT_SDM_DONE_DLY1, n)
#define REG_AUDPLL_SDM_COMP_ACCUM_SIGN      (1 << 8)
#define REG_AUDPLL_SDM_COMP_BYPASS          (1 << 9)
#define REG_AUDPLL_SDM_COMP_BYPASS_DR       (1 << 10)
#define REG_AUDPLL_SDM_CLK_SEL              (1 << 11)
#define REG_AUDPLL_SDM_CLK_SEL_DR           (1 << 12)
#define REG_AUDPLL_DCO_DSWRC_SHIFT          13
#define REG_AUDPLL_DCO_DSWRC_MASK           (0x3 << REG_AUDPLL_DCO_DSWRC_SHIFT)
#define REG_AUDPLL_DCO_DSWRC(n)             BITFIELD_VAL(REG_AUDPLL_DCO_DSWRC, n)
#define REG_AUDPLL_SDM_COMP_G0_DR           (1 << 15)

// REG_376
#define REG_AUDPLL_TDC_COMB_TOFST_SHIFT     0
#define REG_AUDPLL_TDC_COMB_TOFST_MASK      (0x3FF << REG_AUDPLL_TDC_COMB_TOFST_SHIFT)
#define REG_AUDPLL_TDC_COMB_TOFST(n)        BITFIELD_VAL(REG_AUDPLL_TDC_COMB_TOFST, n)
#define REG_AUDPLL_TDC_SWRC_SHIFT           10
#define REG_AUDPLL_TDC_SWRC_MASK            (0x3 << REG_AUDPLL_TDC_SWRC_SHIFT)
#define REG_AUDPLL_TDC_SWRC(n)              BITFIELD_VAL(REG_AUDPLL_TDC_SWRC, n)
#define REG_AUDPLL_SEL_TDC_CHAN_DR_SHIFT    12
#define REG_AUDPLL_SEL_TDC_CHAN_DR_MASK     (0x3 << REG_AUDPLL_SEL_TDC_CHAN_DR_SHIFT)
#define REG_AUDPLL_SEL_TDC_CHAN_DR(n)       BITFIELD_VAL(REG_AUDPLL_SEL_TDC_CHAN_DR, n)
#define REG_AUDPLL_FREQ_OFFSET_EN           (1 << 14)
#define REG_AUDPLL_TRIGGER_EN               (1 << 15)

// REG_377
#define REG_AUDPLL_FREQ_OFFSET_SHIFT        0
#define REG_AUDPLL_FREQ_OFFSET_MASK         (0xFFFF << REG_AUDPLL_FREQ_OFFSET_SHIFT)
#define REG_AUDPLL_FREQ_OFFSET(n)           BITFIELD_VAL(REG_AUDPLL_FREQ_OFFSET, n)

// REG_378
#define REG_AUDPLL_FREQWORD_15_0_SHIFT      0
#define REG_AUDPLL_FREQWORD_15_0_MASK       (0xFFFF << REG_AUDPLL_FREQWORD_15_0_SHIFT)
#define REG_AUDPLL_FREQWORD_15_0(n)         BITFIELD_VAL(REG_AUDPLL_FREQWORD_15_0, n)

// REG_379
#define REG_AUDPLL_FREQWORD_31_16_SHIFT     0
#define REG_AUDPLL_FREQWORD_31_16_MASK      (0xFFFF << REG_AUDPLL_FREQWORD_31_16_SHIFT)
#define REG_AUDPLL_FREQWORD_31_16(n)        BITFIELD_VAL(REG_AUDPLL_FREQWORD_31_16, n)

// REG_37A
#define REG_AUDPLL_FREQWORD_34_32_SHIFT     0
#define REG_AUDPLL_FREQWORD_34_32_MASK      (0x7 << REG_AUDPLL_FREQWORD_34_32_SHIFT)
#define REG_AUDPLL_FREQWORD_34_32(n)        BITFIELD_VAL(REG_AUDPLL_FREQWORD_34_32, n)
#define REG_AUDPLL_PRESCALER_DEL_SEL_SHIFT  3
#define REG_AUDPLL_PRESCALER_DEL_SEL_MASK   (0xF << REG_AUDPLL_PRESCALER_DEL_SEL_SHIFT)
#define REG_AUDPLL_PRESCALER_DEL_SEL(n)     BITFIELD_VAL(REG_AUDPLL_PRESCALER_DEL_SEL, n)
#define REG_AUDPLL_SDM_COMP_G0_SHIFT        7
#define REG_AUDPLL_SDM_COMP_G0_MASK         (0x1FF << REG_AUDPLL_SDM_COMP_G0_SHIFT)
#define REG_AUDPLL_SDM_COMP_G0(n)           BITFIELD_VAL(REG_AUDPLL_SDM_COMP_G0, n)

// REG_37B
#define REG_AUDPLL_TIMING_T1_SHIFT          8
#define REG_AUDPLL_TIMING_T1_MASK           (0xFF << REG_AUDPLL_TIMING_T1_SHIFT)
#define REG_AUDPLL_TIMING_T1(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T1, n)
#define REG_AUDPLL_TIMING_T0_SHIFT          0
#define REG_AUDPLL_TIMING_T0_MASK           (0xFF << REG_AUDPLL_TIMING_T0_SHIFT)
#define REG_AUDPLL_TIMING_T0(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T0, n)

// REG_37C
#define REG_AUDPLL_TIMING_T3_SHIFT          8
#define REG_AUDPLL_TIMING_T3_MASK           (0xFF << REG_AUDPLL_TIMING_T3_SHIFT)
#define REG_AUDPLL_TIMING_T3(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T3, n)
#define REG_AUDPLL_TIMING_T2_SHIFT          0
#define REG_AUDPLL_TIMING_T2_MASK           (0xFF << REG_AUDPLL_TIMING_T2_SHIFT)
#define REG_AUDPLL_TIMING_T2(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T2, n)

// REG_37D
#define REG_AUDPLL_TIMING_T5_SHIFT          8
#define REG_AUDPLL_TIMING_T5_MASK           (0xFF << REG_AUDPLL_TIMING_T5_SHIFT)
#define REG_AUDPLL_TIMING_T5(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T5, n)
#define REG_AUDPLL_TIMING_T4_SHIFT          0
#define REG_AUDPLL_TIMING_T4_MASK           (0xFF << REG_AUDPLL_TIMING_T4_SHIFT)
#define REG_AUDPLL_TIMING_T4(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T4, n)

// REG_37E
#define REG_AUDPLL_TIMING_T7_SHIFT          8
#define REG_AUDPLL_TIMING_T7_MASK           (0xFF << REG_AUDPLL_TIMING_T7_SHIFT)
#define REG_AUDPLL_TIMING_T7(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T7, n)
#define REG_AUDPLL_TIMING_T6_SHIFT          0
#define REG_AUDPLL_TIMING_T6_MASK           (0xFF << REG_AUDPLL_TIMING_T6_SHIFT)
#define REG_AUDPLL_TIMING_T6(n)             BITFIELD_VAL(REG_AUDPLL_TIMING_T6, n)

// REG_37F
#define DIG_AUDPLL_CAL_FREQ_COMPARE_SHIFT   0
#define DIG_AUDPLL_CAL_FREQ_COMPARE_MASK    (0xFFFF << DIG_AUDPLL_CAL_FREQ_COMPARE_SHIFT)
#define DIG_AUDPLL_CAL_FREQ_COMPARE(n)      BITFIELD_VAL(DIG_AUDPLL_CAL_FREQ_COMPARE, n)

// REG_380
#define REG_AUDPLL_LDO_PU_DLY_CNT_SHIFT     0
#define REG_AUDPLL_LDO_PU_DLY_CNT_MASK      (0xF << REG_AUDPLL_LDO_PU_DLY_CNT_SHIFT)
#define REG_AUDPLL_LDO_PU_DLY_CNT(n)        BITFIELD_VAL(REG_AUDPLL_LDO_PU_DLY_CNT, n)
#define REG_AUDPLL_CLKGEN_EN_AD_DR          (1 << 4)
#define REG_AUDPLL_CLKGEN_EN_DIG_DR         (1 << 5)
#define REG_AUDPLL_CLKGEN_EN_AD             (1 << 6)
#define REG_AUDPLL_CLKGEN_EN_DIG            (1 << 7)


// REG_381
#define REG_AUDPLL_VCO_CAL_TIMES_SHIFT      0
#define REG_AUDPLL_VCO_CAL_TIMES_MASK       (0x1FF << REG_AUDPLL_VCO_CAL_TIMES_SHIFT)
#define REG_AUDPLL_VCO_CAL_TIMES(n)         BITFIELD_VAL(REG_AUDPLL_VCO_CAL_TIMES, n)
#define REG_AUDPLL_VCO_COUNT_EN             (1 << 9)

// REG_382
#define DIG_AUDPLL_VCO_CAL_TOTAL_CNT_SHIFT  0
#define DIG_AUDPLL_VCO_CAL_TOTAL_CNT_MASK   (0xFFFF << DIG_AUDPLL_VCO_CAL_TOTAL_CNT_SHIFT)
#define DIG_AUDPLL_VCO_CAL_TOTAL_CNT(n)     BITFIELD_VAL(DIG_AUDPLL_VCO_CAL_TOTAL_CNT, n)

// REG_383
#define DIG_AUDPLL_DIV_PLL_CNT_SHIFT        0
#define DIG_AUDPLL_DIV_PLL_CNT_MASK         (0x1FFF << DIG_AUDPLL_DIV_PLL_CNT_SHIFT)
#define DIG_AUDPLL_DIV_PLL_CNT(n)           BITFIELD_VAL(DIG_AUDPLL_DIV_PLL_CNT, n)
#define DIG_AUDPLL_CAPBANK_DONE             (1 << 13)
#define DIG_AUDPLL_DIV_AUDPLL_LOCK          (1 << 14)
#define DIG_AUDPLL_DCO_DWC_OUT_SAT          (1 << 15)

// REG_384
#define DIG_AUDPLL_SDM_VALUE_SHIFT          0
#define DIG_AUDPLL_SDM_VALUE_MASK           (0x1FF << DIG_AUDPLL_SDM_VALUE_SHIFT)
#define DIG_AUDPLL_SDM_VALUE(n)             BITFIELD_VAL(DIG_AUDPLL_SDM_VALUE, n)

#endif

